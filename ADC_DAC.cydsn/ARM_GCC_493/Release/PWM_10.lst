ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_10.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	PWM_10_initVar
  19              		.bss
  20              		.type	PWM_10_initVar, %object
  21              		.size	PWM_10_initVar, 1
  22              	PWM_10_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.PWM_10_Start,"ax",%progbits
  25              		.align	2
  26              		.global	PWM_10_Start
  27              		.thumb
  28              		.thumb_func
  29              		.type	PWM_10_Start, %function
  30              	PWM_10_Start:
  31              	.LFB0:
  32              		.file 1 "Generated_Source\\PSoC5\\PWM_10.c"
   1:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_10.c **** * File Name: PWM_10.c
   3:Generated_Source\PSoC5/PWM_10.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_10.c **** *
   5:Generated_Source\PSoC5/PWM_10.c **** * Description:
   6:Generated_Source\PSoC5/PWM_10.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_10.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_10.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_10.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_10.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_10.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_10.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_10.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_10.c **** *
  15:Generated_Source\PSoC5/PWM_10.c **** * Note:
  16:Generated_Source\PSoC5/PWM_10.c **** *
  17:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_10.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_10.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_10.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_10.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_10.c **** 
  24:Generated_Source\PSoC5/PWM_10.c **** #include "PWM_10.h"
  25:Generated_Source\PSoC5/PWM_10.c **** 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 2


  26:Generated_Source\PSoC5/PWM_10.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_10.c **** #ifdef PWM_10_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_10.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_10.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_10.c **** #endif /* PWM_10_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM_10.c **** 
  32:Generated_Source\PSoC5/PWM_10.c **** uint8 PWM_10_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_10.c **** 
  34:Generated_Source\PSoC5/PWM_10.c **** 
  35:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_Start
  37:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_10.c **** *
  39:Generated_Source\PSoC5/PWM_10.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_10.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_10.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_10.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_10.c **** *
  44:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_10.c **** *  None
  46:Generated_Source\PSoC5/PWM_10.c **** *
  47:Generated_Source\PSoC5/PWM_10.c **** * Return:
  48:Generated_Source\PSoC5/PWM_10.c **** *  None
  49:Generated_Source\PSoC5/PWM_10.c **** *
  50:Generated_Source\PSoC5/PWM_10.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_10.c **** *  PWM_10_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_10.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_10.c **** *
  54:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_10.c **** void PWM_10_Start(void) 
  56:Generated_Source\PSoC5/PWM_10.c **** {
  33              		.loc 1 56 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  57:Generated_Source\PSoC5/PWM_10.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_10.c ****     if(PWM_10_initVar == 0u)
  43              		.loc 1 58 0
  44 0004 054B     		ldr	r3, .L3
  45 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46 0008 002B     		cmp	r3, #0
  47 000a 04D1     		bne	.L2
  59:Generated_Source\PSoC5/PWM_10.c ****     {
  60:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_Init();
  48              		.loc 1 60 0
  49 000c FFF7FEFF 		bl	PWM_10_Init
  61:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_initVar = 1u;
  50              		.loc 1 61 0
  51 0010 024B     		ldr	r3, .L3
  52 0012 0122     		movs	r2, #1
  53 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 3


  54              	.L2:
  62:Generated_Source\PSoC5/PWM_10.c ****     }
  63:Generated_Source\PSoC5/PWM_10.c ****     PWM_10_Enable();
  55              		.loc 1 63 0
  56 0016 FFF7FEFF 		bl	PWM_10_Enable
  64:Generated_Source\PSoC5/PWM_10.c **** 
  65:Generated_Source\PSoC5/PWM_10.c **** }
  57              		.loc 1 65 0
  58 001a 80BD     		pop	{r7, pc}
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 001c 00000000 		.word	PWM_10_initVar
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	PWM_10_Start, .-PWM_10_Start
  66              		.section	.text.PWM_10_Init,"ax",%progbits
  67              		.align	2
  68              		.global	PWM_10_Init
  69              		.thumb
  70              		.thumb_func
  71              		.type	PWM_10_Init, %function
  72              	PWM_10_Init:
  73              	.LFB1:
  66:Generated_Source\PSoC5/PWM_10.c **** 
  67:Generated_Source\PSoC5/PWM_10.c **** 
  68:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_Init
  70:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_10.c **** *
  72:Generated_Source\PSoC5/PWM_10.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_10.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_10.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_10.c **** *  PWM_10_Start().
  76:Generated_Source\PSoC5/PWM_10.c **** *
  77:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_10.c **** *  None
  79:Generated_Source\PSoC5/PWM_10.c **** *
  80:Generated_Source\PSoC5/PWM_10.c **** * Return:
  81:Generated_Source\PSoC5/PWM_10.c **** *  None
  82:Generated_Source\PSoC5/PWM_10.c **** *
  83:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_10.c **** void PWM_10_Init(void) 
  85:Generated_Source\PSoC5/PWM_10.c **** {
  74              		.loc 1 85 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 82B0     		sub	sp, sp, #8
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  86:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UsingFixedFunction || PWM_10_UseControl)
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 4


  87:Generated_Source\PSoC5/PWM_10.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction || PWM_10_UseControl) */
  89:Generated_Source\PSoC5/PWM_10.c **** 
  90:Generated_Source\PSoC5/PWM_10.c ****     #if(!PWM_10_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UseStatus)
  92:Generated_Source\PSoC5/PWM_10.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_10.c ****             uint8 PWM_10_interruptState;
  94:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UseStatus) */
  95:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (!PWM_10_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_10.c **** 
  97:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_10.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL |= PWM_10_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_CONTROL |= PWM_10_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_10.c **** 
 104:Generated_Source\PSoC5/PWM_10.c ****         ctrl = PWM_10_CONTROL3 & ((uint8 )(~PWM_10_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL3 = ctrl | PWM_10_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_10.c **** 
 107:Generated_Source\PSoC5/PWM_10.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_RT1 &= ((uint8)(~PWM_10_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_RT1 |= PWM_10_SYNC;
 110:Generated_Source\PSoC5/PWM_10.c **** 
 111:Generated_Source\PSoC5/PWM_10.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_RT1 &= ((uint8)(~PWM_10_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_RT1 |= PWM_10_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_10.c **** 
 115:Generated_Source\PSoC5/PWM_10.c ****     #elif (PWM_10_UseControl)
 116:Generated_Source\PSoC5/PWM_10.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_10.c ****         ctrl = PWM_10_CONTROL & ((uint8)(~PWM_10_CTRL_CMPMODE2_MASK)) &
  86              		.loc 1 117 0
  87 0006 1A4B     		ldr	r3, .L6
  88 0008 1B78     		ldrb	r3, [r3]
  89 000a DBB2     		uxtb	r3, r3
  90 000c 23F03F03 		bic	r3, r3, #63
  91 0010 FB71     		strb	r3, [r7, #7]
 118:Generated_Source\PSoC5/PWM_10.c ****                 ((uint8)(~PWM_10_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL = ctrl | PWM_10_DEFAULT_COMPARE2_MODE |
  92              		.loc 1 119 0
  93 0012 174A     		ldr	r2, .L6
  94 0014 FB79     		ldrb	r3, [r7, #7]
  95 0016 43F00A03 		orr	r3, r3, #10
  96 001a DBB2     		uxtb	r3, r3
  97 001c 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/PWM_10.c ****                                    PWM_10_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_10.c **** 
 123:Generated_Source\PSoC5/PWM_10.c ****     #if (!PWM_10_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_10.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_AUX_CONTROLDP0 |= (PWM_10_AUX_CTRL_FIFO0_CLR);
  98              		.loc 1 126 0
  99 001e 154A     		ldr	r2, .L6+4
 100 0020 144B     		ldr	r3, .L6+4
 101 0022 1B78     		ldrb	r3, [r3]
 102 0024 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 5


 103 0026 43F00103 		orr	r3, r3, #1
 104 002a DBB2     		uxtb	r3, r3
 105 002c 1370     		strb	r3, [r2]
 127:Generated_Source\PSoC5/PWM_10.c ****         #else /* (PWM_10_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_10.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_AUX_CONTROLDP0 |= (PWM_10_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_AUX_CONTROLDP1 |= (PWM_10_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_10.c **** 
 133:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_WriteCounter(PWM_10_INIT_PERIOD_VALUE);
 106              		.loc 1 133 0
 107 002e 0120     		movs	r0, #1
 108 0030 FFF7FEFF 		bl	PWM_10_WriteCounter
 134:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (!PWM_10_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_10.c **** 
 136:Generated_Source\PSoC5/PWM_10.c ****     PWM_10_WritePeriod(PWM_10_INIT_PERIOD_VALUE);
 109              		.loc 1 136 0
 110 0034 0120     		movs	r0, #1
 111 0036 FFF7FEFF 		bl	PWM_10_WritePeriod
 137:Generated_Source\PSoC5/PWM_10.c **** 
 138:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_WriteCompare(PWM_10_INIT_COMPARE_VALUE1);
 112              		.loc 1 139 0
 113 003a 0020     		movs	r0, #0
 114 003c FFF7FEFF 		bl	PWM_10_WriteCompare
 140:Generated_Source\PSoC5/PWM_10.c ****         #else
 141:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_WriteCompare1(PWM_10_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_WriteCompare2(PWM_10_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_10.c **** 
 145:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_WriteKillTime(PWM_10_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_10.c **** 
 149:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_WriteDeadTime(PWM_10_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_10.c **** 
 153:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UseStatus || PWM_10_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_SetInterruptMode(PWM_10_INIT_INTERRUPTS_MODE);
 115              		.loc 1 154 0
 116 0040 0020     		movs	r0, #0
 117 0042 FFF7FEFF 		bl	PWM_10_SetInterruptMode
 155:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UseStatus || PWM_10_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_10.c **** 
 157:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_10.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_GLOBAL_ENABLE |= PWM_10_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_10.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL2 |= PWM_10_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_10.c ****     #else
 163:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UseStatus)
 164:Generated_Source\PSoC5/PWM_10.c **** 
 165:Generated_Source\PSoC5/PWM_10.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_10.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_interruptState = CyEnterCriticalSection();
 118              		.loc 1 167 0
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 6


 119 0046 FFF7FEFF 		bl	CyEnterCriticalSection
 120 004a 0346     		mov	r3, r0
 121 004c BB71     		strb	r3, [r7, #6]
 168:Generated_Source\PSoC5/PWM_10.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_STATUS_AUX_CTRL |= PWM_10_STATUS_ACTL_INT_EN_MASK;
 122              		.loc 1 169 0
 123 004e 0A4A     		ldr	r2, .L6+8
 124 0050 094B     		ldr	r3, .L6+8
 125 0052 1B78     		ldrb	r3, [r3]
 126 0054 DBB2     		uxtb	r3, r3
 127 0056 43F01003 		orr	r3, r3, #16
 128 005a DBB2     		uxtb	r3, r3
 129 005c 1370     		strb	r3, [r2]
 170:Generated_Source\PSoC5/PWM_10.c **** 
 171:Generated_Source\PSoC5/PWM_10.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_10.c ****             CyExitCriticalSection(PWM_10_interruptState);
 130              		.loc 1 172 0
 131 005e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 132 0060 1846     		mov	r0, r3
 133 0062 FFF7FEFF 		bl	CyExitCriticalSection
 173:Generated_Source\PSoC5/PWM_10.c **** 
 174:Generated_Source\PSoC5/PWM_10.c ****             /* Clear the FIFO to enable the PWM_10_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_10.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_ClearFIFO();
 134              		.loc 1 176 0
 135 0066 FFF7FEFF 		bl	PWM_10_ClearFIFO
 177:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UseStatus) */
 178:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_10.c **** }
 136              		.loc 1 179 0
 137 006a 0837     		adds	r7, r7, #8
 138              		.cfi_def_cfa_offset 8
 139 006c BD46     		mov	sp, r7
 140              		.cfi_def_cfa_register 13
 141              		@ sp needed
 142 006e 80BD     		pop	{r7, pc}
 143              	.L7:
 144              		.align	2
 145              	.L6:
 146 0070 78650040 		.word	1073767800
 147 0074 9B650040 		.word	1073767835
 148 0078 98650040 		.word	1073767832
 149              		.cfi_endproc
 150              	.LFE1:
 151              		.size	PWM_10_Init, .-PWM_10_Init
 152              		.section	.text.PWM_10_Enable,"ax",%progbits
 153              		.align	2
 154              		.global	PWM_10_Enable
 155              		.thumb
 156              		.thumb_func
 157              		.type	PWM_10_Enable, %function
 158              	PWM_10_Enable:
 159              	.LFB2:
 180:Generated_Source\PSoC5/PWM_10.c **** 
 181:Generated_Source\PSoC5/PWM_10.c **** 
 182:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_Enable
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 7


 184:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_10.c **** *
 186:Generated_Source\PSoC5/PWM_10.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_10.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_10.c **** *
 189:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_10.c **** *  None
 191:Generated_Source\PSoC5/PWM_10.c **** *
 192:Generated_Source\PSoC5/PWM_10.c **** * Return:
 193:Generated_Source\PSoC5/PWM_10.c **** *  None
 194:Generated_Source\PSoC5/PWM_10.c **** *
 195:Generated_Source\PSoC5/PWM_10.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_10.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM_10.c **** *
 198:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_10.c **** void PWM_10_Enable(void) 
 200:Generated_Source\PSoC5/PWM_10.c **** {
 160              		.loc 1 200 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165 0000 80B4     		push	{r7}
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 7, -4
 168 0002 00AF     		add	r7, sp, #0
 169              		.cfi_def_cfa_register 7
 201:Generated_Source\PSoC5/PWM_10.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_GLOBAL_ENABLE |= PWM_10_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_GLOBAL_STBY_ENABLE |= PWM_10_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_10.c **** 
 207:Generated_Source\PSoC5/PWM_10.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UseControl || PWM_10_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL |= PWM_10_CTRL_ENABLE;
 170              		.loc 1 209 0
 171 0004 054A     		ldr	r2, .L9
 172 0006 054B     		ldr	r3, .L9
 173 0008 1B78     		ldrb	r3, [r3]
 174 000a DBB2     		uxtb	r3, r3
 175 000c 63F07F03 		orn	r3, r3, #127
 176 0010 DBB2     		uxtb	r3, r3
 177 0012 1370     		strb	r3, [r2]
 210:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UseControl || PWM_10_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_10.c **** }
 178              		.loc 1 211 0
 179 0014 BD46     		mov	sp, r7
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0016 5DF8047B 		ldr	r7, [sp], #4
 183              		.cfi_restore 7
 184              		.cfi_def_cfa_offset 0
 185 001a 7047     		bx	lr
 186              	.L10:
 187              		.align	2
 188              	.L9:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 8


 189 001c 78650040 		.word	1073767800
 190              		.cfi_endproc
 191              	.LFE2:
 192              		.size	PWM_10_Enable, .-PWM_10_Enable
 193              		.section	.text.PWM_10_Stop,"ax",%progbits
 194              		.align	2
 195              		.global	PWM_10_Stop
 196              		.thumb
 197              		.thumb_func
 198              		.type	PWM_10_Stop, %function
 199              	PWM_10_Stop:
 200              	.LFB3:
 212:Generated_Source\PSoC5/PWM_10.c **** 
 213:Generated_Source\PSoC5/PWM_10.c **** 
 214:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_Stop
 216:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_10.c **** *
 218:Generated_Source\PSoC5/PWM_10.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_10.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_10.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_10.c **** *
 222:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_10.c **** *  None
 224:Generated_Source\PSoC5/PWM_10.c **** *
 225:Generated_Source\PSoC5/PWM_10.c **** * Return:
 226:Generated_Source\PSoC5/PWM_10.c **** *  None
 227:Generated_Source\PSoC5/PWM_10.c **** *
 228:Generated_Source\PSoC5/PWM_10.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_10.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_10.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_10.c **** *
 232:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM_10.c **** void PWM_10_Stop(void) 
 234:Generated_Source\PSoC5/PWM_10.c **** {
 201              		.loc 1 234 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 80B4     		push	{r7}
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 00AF     		add	r7, sp, #0
 210              		.cfi_def_cfa_register 7
 235:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UseControl || PWM_10_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_CONTROL &= ((uint8)(~PWM_10_CTRL_ENABLE));
 211              		.loc 1 236 0
 212 0004 054A     		ldr	r2, .L12
 213 0006 054B     		ldr	r3, .L12
 214 0008 1B78     		ldrb	r3, [r3]
 215 000a DBB2     		uxtb	r3, r3
 216 000c 03F07F03 		and	r3, r3, #127
 217 0010 DBB2     		uxtb	r3, r3
 218 0012 1370     		strb	r3, [r2]
 237:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UseControl || PWM_10_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_10.c **** 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 9


 239:Generated_Source\PSoC5/PWM_10.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_GLOBAL_ENABLE &= ((uint8)(~PWM_10_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_10.c ****         PWM_10_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_10_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_10.c **** }
 219              		.loc 1 244 0
 220 0014 BD46     		mov	sp, r7
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 0016 5DF8047B 		ldr	r7, [sp], #4
 224              		.cfi_restore 7
 225              		.cfi_def_cfa_offset 0
 226 001a 7047     		bx	lr
 227              	.L13:
 228              		.align	2
 229              	.L12:
 230 001c 78650040 		.word	1073767800
 231              		.cfi_endproc
 232              	.LFE3:
 233              		.size	PWM_10_Stop, .-PWM_10_Stop
 234              		.section	.text.PWM_10_WriteCounter,"ax",%progbits
 235              		.align	2
 236              		.global	PWM_10_WriteCounter
 237              		.thumb
 238              		.thumb_func
 239              		.type	PWM_10_WriteCounter, %function
 240              	PWM_10_WriteCounter:
 241              	.LFB4:
 245:Generated_Source\PSoC5/PWM_10.c **** 
 246:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_10.c **** 
 249:Generated_Source\PSoC5/PWM_10.c **** 
 250:Generated_Source\PSoC5/PWM_10.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_10.c ****         * Function Name: PWM_10_SetCompareMode
 252:Generated_Source\PSoC5/PWM_10.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_10.c ****         *
 254:Generated_Source\PSoC5/PWM_10.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_10.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_10.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_10.c ****         *
 258:Generated_Source\PSoC5/PWM_10.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_10.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_10.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_10.c ****         *
 262:Generated_Source\PSoC5/PWM_10.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_10.c ****         *  None
 264:Generated_Source\PSoC5/PWM_10.c ****         *
 265:Generated_Source\PSoC5/PWM_10.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_10.c ****         void PWM_10_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_10.c ****         {
 268:Generated_Source\PSoC5/PWM_10.c ****             #if(PWM_10_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_10.c **** 
 270:Generated_Source\PSoC5/PWM_10.c ****                 #if(0 != PWM_10_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_10_CTRL_CMPMODE1_S
 272:Generated_Source\PSoC5/PWM_10.c ****                 #else
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 10


 273:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_10.c ****                 #endif /* (0 != PWM_10_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_10.c **** 
 276:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL3 &= ((uint8)(~PWM_10_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_10.c **** 
 279:Generated_Source\PSoC5/PWM_10.c ****             #elif (PWM_10_UseControl)
 280:Generated_Source\PSoC5/PWM_10.c **** 
 281:Generated_Source\PSoC5/PWM_10.c ****                 #if(0 != PWM_10_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_10_CTRL_CMPMODE1_
 283:Generated_Source\PSoC5/PWM_10.c ****                                                 PWM_10_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_10.c ****                 #else
 285:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemode1masked = comparemode & PWM_10_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM_10.c ****                 #endif /* (0 != PWM_10_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_10.c **** 
 288:Generated_Source\PSoC5/PWM_10.c ****                 #if(0 != PWM_10_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_10_CTRL_CMPMODE2_
 290:Generated_Source\PSoC5/PWM_10.c ****                                                PWM_10_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_10.c ****                 #else
 292:Generated_Source\PSoC5/PWM_10.c ****                     uint8 comparemode2masked = comparemode & PWM_10_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM_10.c ****                 #endif /* (0 != PWM_10_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_10.c **** 
 295:Generated_Source\PSoC5/PWM_10.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL &= ((uint8)(~(PWM_10_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_10.c ****                                             PWM_10_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_10.c **** 
 300:Generated_Source\PSoC5/PWM_10.c ****             #else
 301:Generated_Source\PSoC5/PWM_10.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (PWM_10_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_10.c ****         }
 304:Generated_Source\PSoC5/PWM_10.c ****     #endif /* PWM_10_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_10.c **** 
 306:Generated_Source\PSoC5/PWM_10.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_10.c **** 
 308:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_10.c **** 
 310:Generated_Source\PSoC5/PWM_10.c **** 
 311:Generated_Source\PSoC5/PWM_10.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_10.c ****         * Function Name: PWM_10_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_10.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_10.c ****         *
 315:Generated_Source\PSoC5/PWM_10.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_10.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_10.c ****         *
 318:Generated_Source\PSoC5/PWM_10.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_10.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_10.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM_10.c ****         *
 322:Generated_Source\PSoC5/PWM_10.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_10.c ****         *  None
 324:Generated_Source\PSoC5/PWM_10.c ****         *
 325:Generated_Source\PSoC5/PWM_10.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_10.c ****         void PWM_10_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_10.c ****         {
 328:Generated_Source\PSoC5/PWM_10.c ****             #if(0 != PWM_10_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_10.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_10_CTRL_CMPMODE1_SHIFT
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 11


 330:Generated_Source\PSoC5/PWM_10.c ****                                            PWM_10_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_10.c ****             #else
 332:Generated_Source\PSoC5/PWM_10.c ****                 uint8 comparemodemasked = comparemode & PWM_10_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (0 != PWM_10_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_10.c **** 
 335:Generated_Source\PSoC5/PWM_10.c ****             #if (PWM_10_UseControl)
 336:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL &= ((uint8)(~PWM_10_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (PWM_10_UseControl) */
 339:Generated_Source\PSoC5/PWM_10.c ****         }
 340:Generated_Source\PSoC5/PWM_10.c ****     #endif /* PWM_10_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_10.c **** 
 342:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM_10.c **** 
 344:Generated_Source\PSoC5/PWM_10.c **** 
 345:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_SetCompareMode2
 347:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_10.c ****     *
 349:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_10.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_10.c ****     *
 352:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_10.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_10.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_10.c ****     *
 356:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_10.c ****     *  None
 358:Generated_Source\PSoC5/PWM_10.c ****     *
 359:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_10.c ****     {
 362:Generated_Source\PSoC5/PWM_10.c **** 
 363:Generated_Source\PSoC5/PWM_10.c ****         #if(0 != PWM_10_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_10.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_10_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM_10.c ****                                                  PWM_10_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_10.c ****         #else
 367:Generated_Source\PSoC5/PWM_10.c ****             uint8 comparemodemasked = comparemode & PWM_10_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (0 != PWM_10_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_10.c **** 
 370:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_UseControl)
 371:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_CONTROL &= ((uint8)(~PWM_10_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UseControl) */
 374:Generated_Source\PSoC5/PWM_10.c ****     }
 375:Generated_Source\PSoC5/PWM_10.c ****     #endif /*PWM_10_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_10.c **** 
 377:Generated_Source\PSoC5/PWM_10.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM_10.c **** 
 379:Generated_Source\PSoC5/PWM_10.c **** 
 380:Generated_Source\PSoC5/PWM_10.c **** #if (!PWM_10_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_10.c **** 
 382:Generated_Source\PSoC5/PWM_10.c **** 
 383:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteCounter
 385:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_10.c ****     *
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 12


 387:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_10.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_10.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_10.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_10.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_10.c ****     *
 393:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_10.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_10.c ****     *
 396:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_10.c ****     *  None
 398:Generated_Source\PSoC5/PWM_10.c ****     *
 399:Generated_Source\PSoC5/PWM_10.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM_10.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_10.c ****     *
 402:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM_10.c ****                                        
 405:Generated_Source\PSoC5/PWM_10.c ****     {
 242              		.loc 1 405 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 8
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247 0000 80B4     		push	{r7}
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 7, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              		.cfi_def_cfa_offset 16
 252 0004 00AF     		add	r7, sp, #0
 253              		.cfi_def_cfa_register 7
 254 0006 0346     		mov	r3, r0
 255 0008 FB71     		strb	r3, [r7, #7]
 406:Generated_Source\PSoC5/PWM_10.c ****         CY_SET_REG8(PWM_10_COUNTER_LSB_PTR, counter);
 256              		.loc 1 406 0
 257 000a 044A     		ldr	r2, .L15
 258 000c FB79     		ldrb	r3, [r7, #7]
 259 000e 1370     		strb	r3, [r2]
 407:Generated_Source\PSoC5/PWM_10.c ****     }
 260              		.loc 1 407 0
 261 0010 0C37     		adds	r7, r7, #12
 262              		.cfi_def_cfa_offset 4
 263 0012 BD46     		mov	sp, r7
 264              		.cfi_def_cfa_register 13
 265              		@ sp needed
 266 0014 5DF8047B 		ldr	r7, [sp], #4
 267              		.cfi_restore 7
 268              		.cfi_def_cfa_offset 0
 269 0018 7047     		bx	lr
 270              	.L16:
 271 001a 00BF     		.align	2
 272              	.L15:
 273 001c 0B650040 		.word	1073767691
 274              		.cfi_endproc
 275              	.LFE4:
 276              		.size	PWM_10_WriteCounter, .-PWM_10_WriteCounter
 277              		.section	.text.PWM_10_ReadCounter,"ax",%progbits
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 13


 278              		.align	2
 279              		.global	PWM_10_ReadCounter
 280              		.thumb
 281              		.thumb_func
 282              		.type	PWM_10_ReadCounter, %function
 283              	PWM_10_ReadCounter:
 284              	.LFB5:
 408:Generated_Source\PSoC5/PWM_10.c **** 
 409:Generated_Source\PSoC5/PWM_10.c **** 
 410:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadCounter
 412:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_10.c ****     *
 414:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_10.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_10.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM_10.c ****     *
 418:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_10.c ****     *  None
 420:Generated_Source\PSoC5/PWM_10.c ****     *
 421:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_10.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_10.c ****     *
 424:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_10.c ****     {
 285              		.loc 1 426 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0000 80B4     		push	{r7}
 291              		.cfi_def_cfa_offset 4
 292              		.cfi_offset 7, -4
 293 0002 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 427:Generated_Source\PSoC5/PWM_10.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_10.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_10.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_10.c ****           (void)CY_GET_REG8(PWM_10_COUNTERCAP_LSB_PTR_8BIT);
 295              		.loc 1 430 0
 296 0004 044B     		ldr	r3, .L19
 297 0006 1B78     		ldrb	r3, [r3]
 431:Generated_Source\PSoC5/PWM_10.c **** 
 432:Generated_Source\PSoC5/PWM_10.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_CAPTURE_LSB_PTR));
 298              		.loc 1 433 0
 299 0008 044B     		ldr	r3, .L19+4
 300 000a 1B78     		ldrb	r3, [r3]
 301 000c DBB2     		uxtb	r3, r3
 434:Generated_Source\PSoC5/PWM_10.c ****     }
 302              		.loc 1 434 0
 303 000e 1846     		mov	r0, r3
 304 0010 BD46     		mov	sp, r7
 305              		.cfi_def_cfa_register 13
 306              		@ sp needed
 307 0012 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 14


 308              		.cfi_restore 7
 309              		.cfi_def_cfa_offset 0
 310 0016 7047     		bx	lr
 311              	.L20:
 312              		.align	2
 313              	.L19:
 314 0018 1B650040 		.word	1073767707
 315 001c 5B650040 		.word	1073767771
 316              		.cfi_endproc
 317              	.LFE5:
 318              		.size	PWM_10_ReadCounter, .-PWM_10_ReadCounter
 319              		.section	.text.PWM_10_ClearFIFO,"ax",%progbits
 320              		.align	2
 321              		.global	PWM_10_ClearFIFO
 322              		.thumb
 323              		.thumb_func
 324              		.type	PWM_10_ClearFIFO, %function
 325              	PWM_10_ClearFIFO:
 326              	.LFB6:
 435:Generated_Source\PSoC5/PWM_10.c **** 
 436:Generated_Source\PSoC5/PWM_10.c ****     #if (PWM_10_UseStatus)
 437:Generated_Source\PSoC5/PWM_10.c **** 
 438:Generated_Source\PSoC5/PWM_10.c **** 
 439:Generated_Source\PSoC5/PWM_10.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_10.c ****         * Function Name: PWM_10_ClearFIFO
 441:Generated_Source\PSoC5/PWM_10.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_10.c ****         *
 443:Generated_Source\PSoC5/PWM_10.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_10.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_10.c ****         *
 446:Generated_Source\PSoC5/PWM_10.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_10.c ****         *  None
 448:Generated_Source\PSoC5/PWM_10.c ****         *
 449:Generated_Source\PSoC5/PWM_10.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_10.c ****         *  None
 451:Generated_Source\PSoC5/PWM_10.c ****         *
 452:Generated_Source\PSoC5/PWM_10.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_10.c ****         void PWM_10_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_10.c ****         {
 327              		.loc 1 454 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
 335 0002 00AF     		add	r7, sp, #0
 336              		.cfi_def_cfa_register 7
 455:Generated_Source\PSoC5/PWM_10.c ****             while(0u != (PWM_10_ReadStatusRegister() & PWM_10_STATUS_FIFONEMPTY))
 337              		.loc 1 455 0
 338 0004 01E0     		b	.L22
 339              	.L23:
 456:Generated_Source\PSoC5/PWM_10.c ****             {
 457:Generated_Source\PSoC5/PWM_10.c ****                 (void)PWM_10_ReadCapture();
 340              		.loc 1 457 0
 341 0006 FFF7FEFF 		bl	PWM_10_ReadCapture
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 15


 342              	.L22:
 455:Generated_Source\PSoC5/PWM_10.c ****             while(0u != (PWM_10_ReadStatusRegister() & PWM_10_STATUS_FIFONEMPTY))
 343              		.loc 1 455 0
 344 000a FFF7FEFF 		bl	PWM_10_ReadStatusRegister
 345 000e 0346     		mov	r3, r0
 346 0010 03F01003 		and	r3, r3, #16
 347 0014 002B     		cmp	r3, #0
 348 0016 F6D1     		bne	.L23
 458:Generated_Source\PSoC5/PWM_10.c ****             }
 459:Generated_Source\PSoC5/PWM_10.c ****         }
 349              		.loc 1 459 0
 350 0018 80BD     		pop	{r7, pc}
 351              		.cfi_endproc
 352              	.LFE6:
 353              		.size	PWM_10_ClearFIFO, .-PWM_10_ClearFIFO
 354 001a 00BF     		.section	.text.PWM_10_WritePeriod,"ax",%progbits
 355              		.align	2
 356              		.global	PWM_10_WritePeriod
 357              		.thumb
 358              		.thumb_func
 359              		.type	PWM_10_WritePeriod, %function
 360              	PWM_10_WritePeriod:
 361              	.LFB7:
 460:Generated_Source\PSoC5/PWM_10.c **** 
 461:Generated_Source\PSoC5/PWM_10.c ****     #endif /* PWM_10_UseStatus */
 462:Generated_Source\PSoC5/PWM_10.c **** 
 463:Generated_Source\PSoC5/PWM_10.c **** #endif /* !PWM_10_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_10.c **** 
 465:Generated_Source\PSoC5/PWM_10.c **** 
 466:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_WritePeriod
 468:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_10.c **** *
 470:Generated_Source\PSoC5/PWM_10.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_10.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_10.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_10.c **** *
 474:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_10.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_10.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_10.c **** *
 478:Generated_Source\PSoC5/PWM_10.c **** * Return:
 479:Generated_Source\PSoC5/PWM_10.c **** *  None
 480:Generated_Source\PSoC5/PWM_10.c **** *
 481:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_10.c **** void PWM_10_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM_10.c **** {
 362              		.loc 1 483 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 8
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 367 0000 80B4     		push	{r7}
 368              		.cfi_def_cfa_offset 4
 369              		.cfi_offset 7, -4
 370 0002 83B0     		sub	sp, sp, #12
 371              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 16


 372 0004 00AF     		add	r7, sp, #0
 373              		.cfi_def_cfa_register 7
 374 0006 0346     		mov	r3, r0
 375 0008 FB71     		strb	r3, [r7, #7]
 484:Generated_Source\PSoC5/PWM_10.c ****     #if(PWM_10_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_10.c ****         CY_SET_REG16(PWM_10_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_10.c ****     #else
 487:Generated_Source\PSoC5/PWM_10.c ****         CY_SET_REG8(PWM_10_PERIOD_LSB_PTR, period);
 376              		.loc 1 487 0
 377 000a 044A     		ldr	r2, .L25
 378 000c FB79     		ldrb	r3, [r7, #7]
 379 000e 1370     		strb	r3, [r2]
 488:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_10.c **** }
 380              		.loc 1 489 0
 381 0010 0C37     		adds	r7, r7, #12
 382              		.cfi_def_cfa_offset 4
 383 0012 BD46     		mov	sp, r7
 384              		.cfi_def_cfa_register 13
 385              		@ sp needed
 386 0014 5DF8047B 		ldr	r7, [sp], #4
 387              		.cfi_restore 7
 388              		.cfi_def_cfa_offset 0
 389 0018 7047     		bx	lr
 390              	.L26:
 391 001a 00BF     		.align	2
 392              	.L25:
 393 001c 4B650040 		.word	1073767755
 394              		.cfi_endproc
 395              	.LFE7:
 396              		.size	PWM_10_WritePeriod, .-PWM_10_WritePeriod
 397              		.section	.text.PWM_10_WriteCompare,"ax",%progbits
 398              		.align	2
 399              		.global	PWM_10_WriteCompare
 400              		.thumb
 401              		.thumb_func
 402              		.type	PWM_10_WriteCompare, %function
 403              	PWM_10_WriteCompare:
 404              	.LFB8:
 490:Generated_Source\PSoC5/PWM_10.c **** 
 491:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_10.c **** 
 493:Generated_Source\PSoC5/PWM_10.c **** 
 494:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteCompare
 496:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_10.c ****     *
 498:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_10.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM_10.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_10.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM_10.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_10.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_10.c ****     *
 505:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_10.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_10.c ****     *
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 17


 508:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_10.c ****     *  None
 510:Generated_Source\PSoC5/PWM_10.c ****     *
 511:Generated_Source\PSoC5/PWM_10.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_10.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_10.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_10.c ****     *
 515:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM_10.c ****                                        
 518:Generated_Source\PSoC5/PWM_10.c ****     {
 405              		.loc 1 518 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 8
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410 0000 80B4     		push	{r7}
 411              		.cfi_def_cfa_offset 4
 412              		.cfi_offset 7, -4
 413 0002 83B0     		sub	sp, sp, #12
 414              		.cfi_def_cfa_offset 16
 415 0004 00AF     		add	r7, sp, #0
 416              		.cfi_def_cfa_register 7
 417 0006 0346     		mov	r3, r0
 418 0008 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG16(PWM_10_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM_10.c ****         #else
 522:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG8(PWM_10_COMPARE1_LSB_PTR, compare);
 419              		.loc 1 522 0
 420 000a 044A     		ldr	r2, .L28
 421 000c FB79     		ldrb	r3, [r7, #7]
 422 000e 1370     		strb	r3, [r2]
 523:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_10.c **** 
 525:Generated_Source\PSoC5/PWM_10.c ****         #if (PWM_10_PWMMode == PWM_10__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_10.c ****             #if(PWM_10_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_10.c ****                 CY_SET_REG16(PWM_10_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_10.c ****             #else
 529:Generated_Source\PSoC5/PWM_10.c ****                 CY_SET_REG8(PWM_10_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (PWM_10_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_PWMMode == PWM_10__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_10.c ****     }
 423              		.loc 1 532 0
 424 0010 0C37     		adds	r7, r7, #12
 425              		.cfi_def_cfa_offset 4
 426 0012 BD46     		mov	sp, r7
 427              		.cfi_def_cfa_register 13
 428              		@ sp needed
 429 0014 5DF8047B 		ldr	r7, [sp], #4
 430              		.cfi_restore 7
 431              		.cfi_def_cfa_offset 0
 432 0018 7047     		bx	lr
 433              	.L29:
 434 001a 00BF     		.align	2
 435              	.L28:
 436 001c 2B650040 		.word	1073767723
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 18


 437              		.cfi_endproc
 438              	.LFE8:
 439              		.size	PWM_10_WriteCompare, .-PWM_10_WriteCompare
 440              		.section	.text.PWM_10_SetInterruptMode,"ax",%progbits
 441              		.align	2
 442              		.global	PWM_10_SetInterruptMode
 443              		.thumb
 444              		.thumb_func
 445              		.type	PWM_10_SetInterruptMode, %function
 446              	PWM_10_SetInterruptMode:
 447              	.LFB9:
 533:Generated_Source\PSoC5/PWM_10.c **** 
 534:Generated_Source\PSoC5/PWM_10.c **** 
 535:Generated_Source\PSoC5/PWM_10.c **** #else
 536:Generated_Source\PSoC5/PWM_10.c **** 
 537:Generated_Source\PSoC5/PWM_10.c **** 
 538:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteCompare1
 540:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM_10.c ****     *
 542:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_10.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_10.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_10.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_10.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_10.c ****     *
 548:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_10.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_10.c ****     *
 551:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_10.c ****     *  None
 553:Generated_Source\PSoC5/PWM_10.c ****     *
 554:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM_10.c ****                                         
 557:Generated_Source\PSoC5/PWM_10.c ****     {
 558:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG16(PWM_10_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM_10.c ****         #else
 561:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG8(PWM_10_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_10.c ****     }
 564:Generated_Source\PSoC5/PWM_10.c **** 
 565:Generated_Source\PSoC5/PWM_10.c **** 
 566:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteCompare2
 568:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_10.c ****     *
 570:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM_10.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM_10.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_10.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_10.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_10.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_10.c ****     *
 577:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_10.c ****     *  compare:  New compare value.
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 19


 579:Generated_Source\PSoC5/PWM_10.c ****     *
 580:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_10.c ****     *  None
 582:Generated_Source\PSoC5/PWM_10.c ****     *
 583:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM_10.c ****                                         
 586:Generated_Source\PSoC5/PWM_10.c ****     {
 587:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG16(PWM_10_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_10.c ****         #else
 590:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG8(PWM_10_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_10.c ****     }
 593:Generated_Source\PSoC5/PWM_10.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_10.c **** 
 595:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_10.c **** 
 597:Generated_Source\PSoC5/PWM_10.c **** 
 598:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_10.c ****     *
 602:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_10.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_10.c ****     *
 605:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_10.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_10.c ****     *
 608:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_10.c ****     *  None
 610:Generated_Source\PSoC5/PWM_10.c ****     *
 611:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_10.c ****     {
 614:Generated_Source\PSoC5/PWM_10.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_10.c ****         #if(!PWM_10_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM_10.c ****             CY_SET_REG8(PWM_10_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM_10.c ****         #else
 618:Generated_Source\PSoC5/PWM_10.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_10.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_10.c ****             PWM_10_DEADBAND_COUNT &= ((uint8)(~PWM_10_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM_10.c **** 
 622:Generated_Source\PSoC5/PWM_10.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_10.c ****             #if(PWM_10_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_10_DEADBAND_COUNT_SHIFT)) 
 625:Generated_Source\PSoC5/PWM_10.c ****                                                     PWM_10_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_10.c ****             #else
 627:Generated_Source\PSoC5/PWM_10.c ****                 PWM_10_DEADBAND_COUNT |= deadtime & PWM_10_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (PWM_10_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM_10.c **** 
 630:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (!PWM_10_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_10.c ****     }
 632:Generated_Source\PSoC5/PWM_10.c **** 
 633:Generated_Source\PSoC5/PWM_10.c **** 
 634:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadDeadTime
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 20


 636:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_10.c ****     *
 638:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_10.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_10.c ****     *
 641:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_10.c ****     *  None
 643:Generated_Source\PSoC5/PWM_10.c ****     *
 644:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_10.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_10.c ****     *
 647:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_10.c ****     {
 650:Generated_Source\PSoC5/PWM_10.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_10.c ****         #if(!PWM_10_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_10.c ****             return (CY_GET_REG8(PWM_10_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_10.c ****         #else
 654:Generated_Source\PSoC5/PWM_10.c **** 
 655:Generated_Source\PSoC5/PWM_10.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_10.c ****             #if(PWM_10_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_10.c ****                 return ((uint8)(((uint8)(PWM_10_DEADBAND_COUNT & PWM_10_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM_10.c ****                                                                            PWM_10_DEADBAND_COUNT_SH
 659:Generated_Source\PSoC5/PWM_10.c ****             #else
 660:Generated_Source\PSoC5/PWM_10.c ****                 return (PWM_10_DEADBAND_COUNT & PWM_10_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM_10.c ****             #endif /* (PWM_10_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (!PWM_10_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_10.c ****     }
 664:Generated_Source\PSoC5/PWM_10.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_10.c **** 
 666:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_UseStatus || PWM_10_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_10.c **** 
 668:Generated_Source\PSoC5/PWM_10.c **** 
 669:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_10.c ****     *
 673:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM_10.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_10.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_10.c ****     *
 677:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_10.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_10.c ****     *
 680:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_10.c ****     *  None
 682:Generated_Source\PSoC5/PWM_10.c ****     *
 683:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM_10.c ****     {
 448              		.loc 1 685 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 8
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453 0000 80B4     		push	{r7}
 454              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 21


 455              		.cfi_offset 7, -4
 456 0002 83B0     		sub	sp, sp, #12
 457              		.cfi_def_cfa_offset 16
 458 0004 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 460 0006 0346     		mov	r3, r0
 461 0008 FB71     		strb	r3, [r7, #7]
 686:Generated_Source\PSoC5/PWM_10.c ****         CY_SET_REG8(PWM_10_STATUS_MASK_PTR, interruptMode);
 462              		.loc 1 686 0
 463 000a 044A     		ldr	r2, .L31
 464 000c FB79     		ldrb	r3, [r7, #7]
 465 000e 1370     		strb	r3, [r2]
 687:Generated_Source\PSoC5/PWM_10.c ****     }
 466              		.loc 1 687 0
 467 0010 0C37     		adds	r7, r7, #12
 468              		.cfi_def_cfa_offset 4
 469 0012 BD46     		mov	sp, r7
 470              		.cfi_def_cfa_register 13
 471              		@ sp needed
 472 0014 5DF8047B 		ldr	r7, [sp], #4
 473              		.cfi_restore 7
 474              		.cfi_def_cfa_offset 0
 475 0018 7047     		bx	lr
 476              	.L32:
 477 001a 00BF     		.align	2
 478              	.L31:
 479 001c 88650040 		.word	1073767816
 480              		.cfi_endproc
 481              	.LFE9:
 482              		.size	PWM_10_SetInterruptMode, .-PWM_10_SetInterruptMode
 483              		.section	.text.PWM_10_ReadStatusRegister,"ax",%progbits
 484              		.align	2
 485              		.global	PWM_10_ReadStatusRegister
 486              		.thumb
 487              		.thumb_func
 488              		.type	PWM_10_ReadStatusRegister, %function
 489              	PWM_10_ReadStatusRegister:
 490              	.LFB10:
 688:Generated_Source\PSoC5/PWM_10.c **** 
 689:Generated_Source\PSoC5/PWM_10.c **** 
 690:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_10.c ****     *
 694:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_10.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_10.c ****     *
 697:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_10.c ****     *  None
 699:Generated_Source\PSoC5/PWM_10.c ****     *
 700:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_10.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_10.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_10.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_10.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM_10.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM_10.c ****     *  [2]   : Terminal count
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 22


 707:Generated_Source\PSoC5/PWM_10.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_10.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_10.c ****     *
 710:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM_10.c ****     {
 491              		.loc 1 712 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496 0000 80B4     		push	{r7}
 497              		.cfi_def_cfa_offset 4
 498              		.cfi_offset 7, -4
 499 0002 00AF     		add	r7, sp, #0
 500              		.cfi_def_cfa_register 7
 713:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_STATUS_PTR));
 501              		.loc 1 713 0
 502 0004 034B     		ldr	r3, .L35
 503 0006 1B78     		ldrb	r3, [r3]
 504 0008 DBB2     		uxtb	r3, r3
 714:Generated_Source\PSoC5/PWM_10.c ****     }
 505              		.loc 1 714 0
 506 000a 1846     		mov	r0, r3
 507 000c BD46     		mov	sp, r7
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 000e 5DF8047B 		ldr	r7, [sp], #4
 511              		.cfi_restore 7
 512              		.cfi_def_cfa_offset 0
 513 0012 7047     		bx	lr
 514              	.L36:
 515              		.align	2
 516              	.L35:
 517 0014 68650040 		.word	1073767784
 518              		.cfi_endproc
 519              	.LFE10:
 520              		.size	PWM_10_ReadStatusRegister, .-PWM_10_ReadStatusRegister
 521              		.section	.text.PWM_10_ReadControlRegister,"ax",%progbits
 522              		.align	2
 523              		.global	PWM_10_ReadControlRegister
 524              		.thumb
 525              		.thumb_func
 526              		.type	PWM_10_ReadControlRegister, %function
 527              	PWM_10_ReadControlRegister:
 528              	.LFB11:
 715:Generated_Source\PSoC5/PWM_10.c **** 
 716:Generated_Source\PSoC5/PWM_10.c **** #endif /* (PWM_10_UseStatus || PWM_10_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_10.c **** 
 718:Generated_Source\PSoC5/PWM_10.c **** 
 719:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_UseControl)
 720:Generated_Source\PSoC5/PWM_10.c **** 
 721:Generated_Source\PSoC5/PWM_10.c **** 
 722:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_10.c ****     *
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 23


 726:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_10.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_10.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_10.c ****     *
 730:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_10.c ****     *  None
 732:Generated_Source\PSoC5/PWM_10.c ****     *
 733:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_10.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_10.c ****     *
 736:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM_10.c ****     {
 529              		.loc 1 738 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534 0000 80B4     		push	{r7}
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 7, -4
 537 0002 83B0     		sub	sp, sp, #12
 538              		.cfi_def_cfa_offset 16
 539 0004 00AF     		add	r7, sp, #0
 540              		.cfi_def_cfa_register 7
 739:Generated_Source\PSoC5/PWM_10.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_10.c **** 
 741:Generated_Source\PSoC5/PWM_10.c ****         result = CY_GET_REG8(PWM_10_CONTROL_PTR);
 541              		.loc 1 741 0
 542 0006 054B     		ldr	r3, .L39
 543 0008 1B78     		ldrb	r3, [r3]
 544 000a FB71     		strb	r3, [r7, #7]
 742:Generated_Source\PSoC5/PWM_10.c ****         return (result);
 545              		.loc 1 742 0
 546 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743:Generated_Source\PSoC5/PWM_10.c ****     }
 547              		.loc 1 743 0
 548 000e 1846     		mov	r0, r3
 549 0010 0C37     		adds	r7, r7, #12
 550              		.cfi_def_cfa_offset 4
 551 0012 BD46     		mov	sp, r7
 552              		.cfi_def_cfa_register 13
 553              		@ sp needed
 554 0014 5DF8047B 		ldr	r7, [sp], #4
 555              		.cfi_restore 7
 556              		.cfi_def_cfa_offset 0
 557 0018 7047     		bx	lr
 558              	.L40:
 559 001a 00BF     		.align	2
 560              	.L39:
 561 001c 78650040 		.word	1073767800
 562              		.cfi_endproc
 563              	.LFE11:
 564              		.size	PWM_10_ReadControlRegister, .-PWM_10_ReadControlRegister
 565              		.section	.text.PWM_10_WriteControlRegister,"ax",%progbits
 566              		.align	2
 567              		.global	PWM_10_WriteControlRegister
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 24


 568              		.thumb
 569              		.thumb_func
 570              		.type	PWM_10_WriteControlRegister, %function
 571              	PWM_10_WriteControlRegister:
 572              	.LFB12:
 744:Generated_Source\PSoC5/PWM_10.c **** 
 745:Generated_Source\PSoC5/PWM_10.c **** 
 746:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_10.c ****     *
 750:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_10.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_10.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_10.c ****     *
 754:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM_10.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM_10.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_10.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_10.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_10.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_10.c ****     *
 761:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_10.c ****     *  None
 763:Generated_Source\PSoC5/PWM_10.c ****     *
 764:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_10.c ****     void PWM_10_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_10.c ****     {
 573              		.loc 1 766 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 8
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577              		@ link register save eliminated.
 578 0000 80B4     		push	{r7}
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              		.cfi_def_cfa_register 7
 585 0006 0346     		mov	r3, r0
 586 0008 FB71     		strb	r3, [r7, #7]
 767:Generated_Source\PSoC5/PWM_10.c ****         CY_SET_REG8(PWM_10_CONTROL_PTR, control);
 587              		.loc 1 767 0
 588 000a 044A     		ldr	r2, .L42
 589 000c FB79     		ldrb	r3, [r7, #7]
 590 000e 1370     		strb	r3, [r2]
 768:Generated_Source\PSoC5/PWM_10.c ****     }
 591              		.loc 1 768 0
 592 0010 0C37     		adds	r7, r7, #12
 593              		.cfi_def_cfa_offset 4
 594 0012 BD46     		mov	sp, r7
 595              		.cfi_def_cfa_register 13
 596              		@ sp needed
 597 0014 5DF8047B 		ldr	r7, [sp], #4
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 25


 600 0018 7047     		bx	lr
 601              	.L43:
 602 001a 00BF     		.align	2
 603              	.L42:
 604 001c 78650040 		.word	1073767800
 605              		.cfi_endproc
 606              	.LFE12:
 607              		.size	PWM_10_WriteControlRegister, .-PWM_10_WriteControlRegister
 608              		.section	.text.PWM_10_ReadCapture,"ax",%progbits
 609              		.align	2
 610              		.global	PWM_10_ReadCapture
 611              		.thumb
 612              		.thumb_func
 613              		.type	PWM_10_ReadCapture, %function
 614              	PWM_10_ReadCapture:
 615              	.LFB13:
 769:Generated_Source\PSoC5/PWM_10.c **** 
 770:Generated_Source\PSoC5/PWM_10.c **** #endif /* (PWM_10_UseControl) */
 771:Generated_Source\PSoC5/PWM_10.c **** 
 772:Generated_Source\PSoC5/PWM_10.c **** 
 773:Generated_Source\PSoC5/PWM_10.c **** #if (!PWM_10_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_10.c **** 
 775:Generated_Source\PSoC5/PWM_10.c **** 
 776:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadCapture
 778:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_10.c ****     *
 780:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_10.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_10.c ****     *
 783:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_10.c ****     *  None
 785:Generated_Source\PSoC5/PWM_10.c ****     *
 786:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_10.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_10.c ****     *
 789:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_10.c ****     {
 616              		.loc 1 791 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621 0000 80B4     		push	{r7}
 622              		.cfi_def_cfa_offset 4
 623              		.cfi_offset 7, -4
 624 0002 00AF     		add	r7, sp, #0
 625              		.cfi_def_cfa_register 7
 792:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_CAPTURE_LSB_PTR));
 626              		.loc 1 792 0
 627 0004 034B     		ldr	r3, .L46
 628 0006 1B78     		ldrb	r3, [r3]
 629 0008 DBB2     		uxtb	r3, r3
 793:Generated_Source\PSoC5/PWM_10.c ****     }
 630              		.loc 1 793 0
 631 000a 1846     		mov	r0, r3
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 26


 632 000c BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 000e 5DF8047B 		ldr	r7, [sp], #4
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 0012 7047     		bx	lr
 639              	.L47:
 640              		.align	2
 641              	.L46:
 642 0014 5B650040 		.word	1073767771
 643              		.cfi_endproc
 644              	.LFE13:
 645              		.size	PWM_10_ReadCapture, .-PWM_10_ReadCapture
 646              		.section	.text.PWM_10_ReadCompare,"ax",%progbits
 647              		.align	2
 648              		.global	PWM_10_ReadCompare
 649              		.thumb
 650              		.thumb_func
 651              		.type	PWM_10_ReadCompare, %function
 652              	PWM_10_ReadCompare:
 653              	.LFB14:
 794:Generated_Source\PSoC5/PWM_10.c **** 
 795:Generated_Source\PSoC5/PWM_10.c **** #endif /* (!PWM_10_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_10.c **** 
 797:Generated_Source\PSoC5/PWM_10.c **** 
 798:Generated_Source\PSoC5/PWM_10.c **** #if (PWM_10_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_10.c **** 
 800:Generated_Source\PSoC5/PWM_10.c **** 
 801:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadCompare
 803:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_10.c ****     *
 805:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_10.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_10.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_10.c ****     *
 809:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_10.c ****     *  None
 811:Generated_Source\PSoC5/PWM_10.c ****     *
 812:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_10.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_10.c ****     *
 815:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_10.c ****     {
 654              		.loc 1 817 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 80B4     		push	{r7}
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 7, -4
 662 0002 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 818:Generated_Source\PSoC5/PWM_10.c ****         #if(PWM_10_UsingFixedFunction)
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 27


 819:Generated_Source\PSoC5/PWM_10.c ****             return ((uint8)CY_GET_REG16(PWM_10_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_10.c ****         #else
 821:Generated_Source\PSoC5/PWM_10.c ****             return (CY_GET_REG8(PWM_10_COMPARE1_LSB_PTR));
 664              		.loc 1 821 0
 665 0004 034B     		ldr	r3, .L50
 666 0006 1B78     		ldrb	r3, [r3]
 667 0008 DBB2     		uxtb	r3, r3
 822:Generated_Source\PSoC5/PWM_10.c ****         #endif /* (PWM_10_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_10.c ****     }
 668              		.loc 1 823 0
 669 000a 1846     		mov	r0, r3
 670 000c BD46     		mov	sp, r7
 671              		.cfi_def_cfa_register 13
 672              		@ sp needed
 673 000e 5DF8047B 		ldr	r7, [sp], #4
 674              		.cfi_restore 7
 675              		.cfi_def_cfa_offset 0
 676 0012 7047     		bx	lr
 677              	.L51:
 678              		.align	2
 679              	.L50:
 680 0014 2B650040 		.word	1073767723
 681              		.cfi_endproc
 682              	.LFE14:
 683              		.size	PWM_10_ReadCompare, .-PWM_10_ReadCompare
 684              		.section	.text.PWM_10_ReadPeriod,"ax",%progbits
 685              		.align	2
 686              		.global	PWM_10_ReadPeriod
 687              		.thumb
 688              		.thumb_func
 689              		.type	PWM_10_ReadPeriod, %function
 690              	PWM_10_ReadPeriod:
 691              	.LFB15:
 824:Generated_Source\PSoC5/PWM_10.c **** 
 825:Generated_Source\PSoC5/PWM_10.c **** #else
 826:Generated_Source\PSoC5/PWM_10.c **** 
 827:Generated_Source\PSoC5/PWM_10.c **** 
 828:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadCompare1
 830:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM_10.c ****     *
 832:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_10.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_10.c ****     *
 835:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_10.c ****     *  None
 837:Generated_Source\PSoC5/PWM_10.c ****     *
 838:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_10.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_10.c ****     *
 841:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_10.c ****     {
 844:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_10.c ****     }
 846:Generated_Source\PSoC5/PWM_10.c **** 
 847:Generated_Source\PSoC5/PWM_10.c **** 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 28


 848:Generated_Source\PSoC5/PWM_10.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_10.c ****     * Function Name: PWM_10_ReadCompare2
 850:Generated_Source\PSoC5/PWM_10.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_10.c ****     *
 852:Generated_Source\PSoC5/PWM_10.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_10.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_10.c ****     *
 855:Generated_Source\PSoC5/PWM_10.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_10.c ****     *  None
 857:Generated_Source\PSoC5/PWM_10.c ****     *
 858:Generated_Source\PSoC5/PWM_10.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_10.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_10.c ****     *
 861:Generated_Source\PSoC5/PWM_10.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_10.c ****     uint8 PWM_10_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_10.c ****     {
 864:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_10.c ****     }
 866:Generated_Source\PSoC5/PWM_10.c **** 
 867:Generated_Source\PSoC5/PWM_10.c **** #endif /* (PWM_10_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM_10.c **** 
 869:Generated_Source\PSoC5/PWM_10.c **** 
 870:Generated_Source\PSoC5/PWM_10.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_10.c **** * Function Name: PWM_10_ReadPeriod
 872:Generated_Source\PSoC5/PWM_10.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM_10.c **** *
 874:Generated_Source\PSoC5/PWM_10.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_10.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_10.c **** *
 877:Generated_Source\PSoC5/PWM_10.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_10.c **** *  None
 879:Generated_Source\PSoC5/PWM_10.c **** *
 880:Generated_Source\PSoC5/PWM_10.c **** * Return:
 881:Generated_Source\PSoC5/PWM_10.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_10.c **** *
 883:Generated_Source\PSoC5/PWM_10.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_10.c **** uint8 PWM_10_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_10.c **** {
 692              		.loc 1 885 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 697 0000 80B4     		push	{r7}
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 7, -4
 700 0002 00AF     		add	r7, sp, #0
 701              		.cfi_def_cfa_register 7
 886:Generated_Source\PSoC5/PWM_10.c ****     #if(PWM_10_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_10.c ****         return ((uint8)CY_GET_REG16(PWM_10_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_10.c ****     #else
 889:Generated_Source\PSoC5/PWM_10.c ****         return (CY_GET_REG8(PWM_10_PERIOD_LSB_PTR));
 702              		.loc 1 889 0
 703 0004 034B     		ldr	r3, .L54
 704 0006 1B78     		ldrb	r3, [r3]
 705 0008 DBB2     		uxtb	r3, r3
 890:Generated_Source\PSoC5/PWM_10.c ****     #endif /* (PWM_10_UsingFixedFunction) */
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 29


 891:Generated_Source\PSoC5/PWM_10.c **** }
 706              		.loc 1 891 0
 707 000a 1846     		mov	r0, r3
 708 000c BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 000e 5DF8047B 		ldr	r7, [sp], #4
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 0012 7047     		bx	lr
 715              	.L55:
 716              		.align	2
 717              	.L54:
 718 0014 4B650040 		.word	1073767755
 719              		.cfi_endproc
 720              	.LFE15:
 721              		.size	PWM_10_ReadPeriod, .-PWM_10_ReadPeriod
 722              		.text
 723              	.Letext0:
 724              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 725              		.section	.debug_info,"",%progbits
 726              	.Ldebug_info0:
 727 0000 7F020000 		.4byte	0x27f
 728 0004 0400     		.2byte	0x4
 729 0006 00000000 		.4byte	.Ldebug_abbrev0
 730 000a 04       		.byte	0x4
 731 000b 01       		.uleb128 0x1
 732 000c D5010000 		.4byte	.LASF38
 733 0010 01       		.byte	0x1
 734 0011 57000000 		.4byte	.LASF39
 735 0015 A1020000 		.4byte	.LASF40
 736 0019 00000000 		.4byte	.Ldebug_ranges0+0
 737 001d 00000000 		.4byte	0
 738 0021 00000000 		.4byte	.Ldebug_line0
 739 0025 02       		.uleb128 0x2
 740 0026 01       		.byte	0x1
 741 0027 06       		.byte	0x6
 742 0028 16030000 		.4byte	.LASF0
 743 002c 02       		.uleb128 0x2
 744 002d 01       		.byte	0x1
 745 002e 08       		.byte	0x8
 746 002f 77000000 		.4byte	.LASF1
 747 0033 02       		.uleb128 0x2
 748 0034 02       		.byte	0x2
 749 0035 05       		.byte	0x5
 750 0036 97020000 		.4byte	.LASF2
 751 003a 02       		.uleb128 0x2
 752 003b 02       		.byte	0x2
 753 003c 07       		.byte	0x7
 754 003d 2A030000 		.4byte	.LASF3
 755 0041 02       		.uleb128 0x2
 756 0042 04       		.byte	0x4
 757 0043 05       		.byte	0x5
 758 0044 F5020000 		.4byte	.LASF4
 759 0048 02       		.uleb128 0x2
 760 0049 04       		.byte	0x4
 761 004a 07       		.byte	0x7
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 30


 762 004b A5000000 		.4byte	.LASF5
 763 004f 02       		.uleb128 0x2
 764 0050 08       		.byte	0x8
 765 0051 05       		.byte	0x5
 766 0052 B9010000 		.4byte	.LASF6
 767 0056 02       		.uleb128 0x2
 768 0057 08       		.byte	0x8
 769 0058 07       		.byte	0x7
 770 0059 43010000 		.4byte	.LASF7
 771 005d 03       		.uleb128 0x3
 772 005e 04       		.byte	0x4
 773 005f 05       		.byte	0x5
 774 0060 696E7400 		.ascii	"int\000"
 775 0064 02       		.uleb128 0x2
 776 0065 04       		.byte	0x4
 777 0066 07       		.byte	0x7
 778 0067 23010000 		.4byte	.LASF8
 779 006b 04       		.uleb128 0x4
 780 006c B7000000 		.4byte	.LASF12
 781 0070 02       		.byte	0x2
 782 0071 9201     		.2byte	0x192
 783 0073 2C000000 		.4byte	0x2c
 784 0077 02       		.uleb128 0x2
 785 0078 04       		.byte	0x4
 786 0079 04       		.byte	0x4
 787 007a 49000000 		.4byte	.LASF9
 788 007e 02       		.uleb128 0x2
 789 007f 08       		.byte	0x8
 790 0080 04       		.byte	0x4
 791 0081 D9000000 		.4byte	.LASF10
 792 0085 02       		.uleb128 0x2
 793 0086 01       		.byte	0x1
 794 0087 08       		.byte	0x8
 795 0088 FE020000 		.4byte	.LASF11
 796 008c 04       		.uleb128 0x4
 797 008d 85000000 		.4byte	.LASF13
 798 0091 02       		.byte	0x2
 799 0092 3C02     		.2byte	0x23c
 800 0094 98000000 		.4byte	0x98
 801 0098 05       		.uleb128 0x5
 802 0099 6B000000 		.4byte	0x6b
 803 009d 02       		.uleb128 0x2
 804 009e 04       		.byte	0x4
 805 009f 07       		.byte	0x7
 806 00a0 A2010000 		.4byte	.LASF14
 807 00a4 06       		.uleb128 0x6
 808 00a5 16010000 		.4byte	.LASF17
 809 00a9 01       		.byte	0x1
 810 00aa 37       		.byte	0x37
 811 00ab 00000000 		.4byte	.LFB0
 812 00af 20000000 		.4byte	.LFE0-.LFB0
 813 00b3 01       		.uleb128 0x1
 814 00b4 9C       		.byte	0x9c
 815 00b5 07       		.uleb128 0x7
 816 00b6 2B000000 		.4byte	.LASF20
 817 00ba 01       		.byte	0x1
 818 00bb 54       		.byte	0x54
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 31


 819 00bc 00000000 		.4byte	.LFB1
 820 00c0 7C000000 		.4byte	.LFE1-.LFB1
 821 00c4 01       		.uleb128 0x1
 822 00c5 9C       		.byte	0x9c
 823 00c6 E7000000 		.4byte	0xe7
 824 00ca 08       		.uleb128 0x8
 825 00cb 9D010000 		.4byte	.LASF15
 826 00cf 01       		.byte	0x1
 827 00d0 57       		.byte	0x57
 828 00d1 6B000000 		.4byte	0x6b
 829 00d5 02       		.uleb128 0x2
 830 00d6 91       		.byte	0x91
 831 00d7 77       		.sleb128 -9
 832 00d8 08       		.uleb128 0x8
 833 00d9 E0000000 		.4byte	.LASF16
 834 00dd 01       		.byte	0x1
 835 00de 5D       		.byte	0x5d
 836 00df 6B000000 		.4byte	0x6b
 837 00e3 02       		.uleb128 0x2
 838 00e4 91       		.byte	0x91
 839 00e5 76       		.sleb128 -10
 840 00e6 00       		.byte	0
 841 00e7 09       		.uleb128 0x9
 842 00e8 AB010000 		.4byte	.LASF18
 843 00ec 01       		.byte	0x1
 844 00ed C7       		.byte	0xc7
 845 00ee 00000000 		.4byte	.LFB2
 846 00f2 20000000 		.4byte	.LFE2-.LFB2
 847 00f6 01       		.uleb128 0x1
 848 00f7 9C       		.byte	0x9c
 849 00f8 09       		.uleb128 0x9
 850 00f9 F6000000 		.4byte	.LASF19
 851 00fd 01       		.byte	0x1
 852 00fe E9       		.byte	0xe9
 853 00ff 00000000 		.4byte	.LFB3
 854 0103 20000000 		.4byte	.LFE3-.LFB3
 855 0107 01       		.uleb128 0x1
 856 0108 9C       		.byte	0x9c
 857 0109 0A       		.uleb128 0xa
 858 010a 02010000 		.4byte	.LASF21
 859 010e 01       		.byte	0x1
 860 010f 9301     		.2byte	0x193
 861 0111 00000000 		.4byte	.LFB4
 862 0115 20000000 		.4byte	.LFE4-.LFB4
 863 0119 01       		.uleb128 0x1
 864 011a 9C       		.byte	0x9c
 865 011b 2F010000 		.4byte	0x12f
 866 011f 0B       		.uleb128 0xb
 867 0120 4F000000 		.4byte	.LASF24
 868 0124 01       		.byte	0x1
 869 0125 9301     		.2byte	0x193
 870 0127 6B000000 		.4byte	0x6b
 871 012b 02       		.uleb128 0x2
 872 012c 91       		.byte	0x91
 873 012d 77       		.sleb128 -9
 874 012e 00       		.byte	0
 875 012f 0C       		.uleb128 0xc
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 32


 876 0130 03030000 		.4byte	.LASF30
 877 0134 01       		.byte	0x1
 878 0135 A901     		.2byte	0x1a9
 879 0137 6B000000 		.4byte	0x6b
 880 013b 00000000 		.4byte	.LFB5
 881 013f 20000000 		.4byte	.LFE5-.LFB5
 882 0143 01       		.uleb128 0x1
 883 0144 9C       		.byte	0x9c
 884 0145 0D       		.uleb128 0xd
 885 0146 1A000000 		.4byte	.LASF22
 886 014a 01       		.byte	0x1
 887 014b C501     		.2byte	0x1c5
 888 014d 00000000 		.4byte	.LFB6
 889 0151 1A000000 		.4byte	.LFE6-.LFB6
 890 0155 01       		.uleb128 0x1
 891 0156 9C       		.byte	0x9c
 892 0157 0A       		.uleb128 0xa
 893 0158 00000000 		.4byte	.LASF23
 894 015c 01       		.byte	0x1
 895 015d E201     		.2byte	0x1e2
 896 015f 00000000 		.4byte	.LFB7
 897 0163 20000000 		.4byte	.LFE7-.LFB7
 898 0167 01       		.uleb128 0x1
 899 0168 9C       		.byte	0x9c
 900 0169 7D010000 		.4byte	0x17d
 901 016d 0B       		.uleb128 0xb
 902 016e 13000000 		.4byte	.LASF25
 903 0172 01       		.byte	0x1
 904 0173 E201     		.2byte	0x1e2
 905 0175 6B000000 		.4byte	0x6b
 906 0179 02       		.uleb128 0x2
 907 017a 91       		.byte	0x91
 908 017b 77       		.sleb128 -9
 909 017c 00       		.byte	0
 910 017d 0A       		.uleb128 0xa
 911 017e C5000000 		.4byte	.LASF26
 912 0182 01       		.byte	0x1
 913 0183 0402     		.2byte	0x204
 914 0185 00000000 		.4byte	.LFB8
 915 0189 20000000 		.4byte	.LFE8-.LFB8
 916 018d 01       		.uleb128 0x1
 917 018e 9C       		.byte	0x9c
 918 018f A3010000 		.4byte	0x1a3
 919 0193 0B       		.uleb128 0xb
 920 0194 22030000 		.4byte	.LASF27
 921 0198 01       		.byte	0x1
 922 0199 0402     		.2byte	0x204
 923 019b 6B000000 		.4byte	0x6b
 924 019f 02       		.uleb128 0x2
 925 01a0 91       		.byte	0x91
 926 01a1 77       		.sleb128 -9
 927 01a2 00       		.byte	0
 928 01a3 0A       		.uleb128 0xa
 929 01a4 7F020000 		.4byte	.LASF28
 930 01a8 01       		.byte	0x1
 931 01a9 AC02     		.2byte	0x2ac
 932 01ab 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 33


 933 01af 20000000 		.4byte	.LFE9-.LFB9
 934 01b3 01       		.uleb128 0x1
 935 01b4 9C       		.byte	0x9c
 936 01b5 C9010000 		.4byte	0x1c9
 937 01b9 0B       		.uleb128 0xb
 938 01ba C7010000 		.4byte	.LASF29
 939 01be 01       		.byte	0x1
 940 01bf AC02     		.2byte	0x2ac
 941 01c1 6B000000 		.4byte	0x6b
 942 01c5 02       		.uleb128 0x2
 943 01c6 91       		.byte	0x91
 944 01c7 77       		.sleb128 -9
 945 01c8 00       		.byte	0
 946 01c9 0C       		.uleb128 0xc
 947 01ca 5A010000 		.4byte	.LASF31
 948 01ce 01       		.byte	0x1
 949 01cf C702     		.2byte	0x2c7
 950 01d1 6B000000 		.4byte	0x6b
 951 01d5 00000000 		.4byte	.LFB10
 952 01d9 18000000 		.4byte	.LFE10-.LFB10
 953 01dd 01       		.uleb128 0x1
 954 01de 9C       		.byte	0x9c
 955 01df 0E       		.uleb128 0xe
 956 01e0 8A000000 		.4byte	.LASF41
 957 01e4 01       		.byte	0x1
 958 01e5 E102     		.2byte	0x2e1
 959 01e7 6B000000 		.4byte	0x6b
 960 01eb 00000000 		.4byte	.LFB11
 961 01ef 20000000 		.4byte	.LFE11-.LFB11
 962 01f3 01       		.uleb128 0x1
 963 01f4 9C       		.byte	0x9c
 964 01f5 09020000 		.4byte	0x209
 965 01f9 0F       		.uleb128 0xf
 966 01fa 74010000 		.4byte	.LASF32
 967 01fe 01       		.byte	0x1
 968 01ff E302     		.2byte	0x2e3
 969 0201 6B000000 		.4byte	0x6b
 970 0205 02       		.uleb128 0x2
 971 0206 91       		.byte	0x91
 972 0207 77       		.sleb128 -9
 973 0208 00       		.byte	0
 974 0209 0A       		.uleb128 0xa
 975 020a 63020000 		.4byte	.LASF33
 976 020e 01       		.byte	0x1
 977 020f FD02     		.2byte	0x2fd
 978 0211 00000000 		.4byte	.LFB12
 979 0215 20000000 		.4byte	.LFE12-.LFB12
 980 0219 01       		.uleb128 0x1
 981 021a 9C       		.byte	0x9c
 982 021b 2F020000 		.4byte	0x22f
 983 021f 0B       		.uleb128 0xb
 984 0220 BD000000 		.4byte	.LASF34
 985 0224 01       		.byte	0x1
 986 0225 FD02     		.2byte	0x2fd
 987 0227 6B000000 		.4byte	0x6b
 988 022b 02       		.uleb128 0x2
 989 022c 91       		.byte	0x91
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 34


 990 022d 77       		.sleb128 -9
 991 022e 00       		.byte	0
 992 022f 0C       		.uleb128 0xc
 993 0230 30010000 		.4byte	.LASF35
 994 0234 01       		.byte	0x1
 995 0235 1603     		.2byte	0x316
 996 0237 6B000000 		.4byte	0x6b
 997 023b 00000000 		.4byte	.LFB13
 998 023f 18000000 		.4byte	.LFE13-.LFB13
 999 0243 01       		.uleb128 0x1
 1000 0244 9C       		.byte	0x9c
 1001 0245 0C       		.uleb128 0xc
 1002 0246 8A010000 		.4byte	.LASF36
 1003 024a 01       		.byte	0x1
 1004 024b 3003     		.2byte	0x330
 1005 024d 6B000000 		.4byte	0x6b
 1006 0251 00000000 		.4byte	.LFB14
 1007 0255 18000000 		.4byte	.LFE14-.LFB14
 1008 0259 01       		.uleb128 0x1
 1009 025a 9C       		.byte	0x9c
 1010 025b 0C       		.uleb128 0xc
 1011 025c 37000000 		.4byte	.LASF37
 1012 0260 01       		.byte	0x1
 1013 0261 7403     		.2byte	0x374
 1014 0263 6B000000 		.4byte	0x6b
 1015 0267 00000000 		.4byte	.LFB15
 1016 026b 18000000 		.4byte	.LFE15-.LFB15
 1017 026f 01       		.uleb128 0x1
 1018 0270 9C       		.byte	0x9c
 1019 0271 10       		.uleb128 0x10
 1020 0272 7B010000 		.4byte	.LASF42
 1021 0276 01       		.byte	0x1
 1022 0277 20       		.byte	0x20
 1023 0278 6B000000 		.4byte	0x6b
 1024 027c 05       		.uleb128 0x5
 1025 027d 03       		.byte	0x3
 1026 027e 00000000 		.4byte	PWM_10_initVar
 1027 0282 00       		.byte	0
 1028              		.section	.debug_abbrev,"",%progbits
 1029              	.Ldebug_abbrev0:
 1030 0000 01       		.uleb128 0x1
 1031 0001 11       		.uleb128 0x11
 1032 0002 01       		.byte	0x1
 1033 0003 25       		.uleb128 0x25
 1034 0004 0E       		.uleb128 0xe
 1035 0005 13       		.uleb128 0x13
 1036 0006 0B       		.uleb128 0xb
 1037 0007 03       		.uleb128 0x3
 1038 0008 0E       		.uleb128 0xe
 1039 0009 1B       		.uleb128 0x1b
 1040 000a 0E       		.uleb128 0xe
 1041 000b 55       		.uleb128 0x55
 1042 000c 17       		.uleb128 0x17
 1043 000d 11       		.uleb128 0x11
 1044 000e 01       		.uleb128 0x1
 1045 000f 10       		.uleb128 0x10
 1046 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 35


 1047 0011 00       		.byte	0
 1048 0012 00       		.byte	0
 1049 0013 02       		.uleb128 0x2
 1050 0014 24       		.uleb128 0x24
 1051 0015 00       		.byte	0
 1052 0016 0B       		.uleb128 0xb
 1053 0017 0B       		.uleb128 0xb
 1054 0018 3E       		.uleb128 0x3e
 1055 0019 0B       		.uleb128 0xb
 1056 001a 03       		.uleb128 0x3
 1057 001b 0E       		.uleb128 0xe
 1058 001c 00       		.byte	0
 1059 001d 00       		.byte	0
 1060 001e 03       		.uleb128 0x3
 1061 001f 24       		.uleb128 0x24
 1062 0020 00       		.byte	0
 1063 0021 0B       		.uleb128 0xb
 1064 0022 0B       		.uleb128 0xb
 1065 0023 3E       		.uleb128 0x3e
 1066 0024 0B       		.uleb128 0xb
 1067 0025 03       		.uleb128 0x3
 1068 0026 08       		.uleb128 0x8
 1069 0027 00       		.byte	0
 1070 0028 00       		.byte	0
 1071 0029 04       		.uleb128 0x4
 1072 002a 16       		.uleb128 0x16
 1073 002b 00       		.byte	0
 1074 002c 03       		.uleb128 0x3
 1075 002d 0E       		.uleb128 0xe
 1076 002e 3A       		.uleb128 0x3a
 1077 002f 0B       		.uleb128 0xb
 1078 0030 3B       		.uleb128 0x3b
 1079 0031 05       		.uleb128 0x5
 1080 0032 49       		.uleb128 0x49
 1081 0033 13       		.uleb128 0x13
 1082 0034 00       		.byte	0
 1083 0035 00       		.byte	0
 1084 0036 05       		.uleb128 0x5
 1085 0037 35       		.uleb128 0x35
 1086 0038 00       		.byte	0
 1087 0039 49       		.uleb128 0x49
 1088 003a 13       		.uleb128 0x13
 1089 003b 00       		.byte	0
 1090 003c 00       		.byte	0
 1091 003d 06       		.uleb128 0x6
 1092 003e 2E       		.uleb128 0x2e
 1093 003f 00       		.byte	0
 1094 0040 3F       		.uleb128 0x3f
 1095 0041 19       		.uleb128 0x19
 1096 0042 03       		.uleb128 0x3
 1097 0043 0E       		.uleb128 0xe
 1098 0044 3A       		.uleb128 0x3a
 1099 0045 0B       		.uleb128 0xb
 1100 0046 3B       		.uleb128 0x3b
 1101 0047 0B       		.uleb128 0xb
 1102 0048 27       		.uleb128 0x27
 1103 0049 19       		.uleb128 0x19
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 36


 1104 004a 11       		.uleb128 0x11
 1105 004b 01       		.uleb128 0x1
 1106 004c 12       		.uleb128 0x12
 1107 004d 06       		.uleb128 0x6
 1108 004e 40       		.uleb128 0x40
 1109 004f 18       		.uleb128 0x18
 1110 0050 9642     		.uleb128 0x2116
 1111 0052 19       		.uleb128 0x19
 1112 0053 00       		.byte	0
 1113 0054 00       		.byte	0
 1114 0055 07       		.uleb128 0x7
 1115 0056 2E       		.uleb128 0x2e
 1116 0057 01       		.byte	0x1
 1117 0058 3F       		.uleb128 0x3f
 1118 0059 19       		.uleb128 0x19
 1119 005a 03       		.uleb128 0x3
 1120 005b 0E       		.uleb128 0xe
 1121 005c 3A       		.uleb128 0x3a
 1122 005d 0B       		.uleb128 0xb
 1123 005e 3B       		.uleb128 0x3b
 1124 005f 0B       		.uleb128 0xb
 1125 0060 27       		.uleb128 0x27
 1126 0061 19       		.uleb128 0x19
 1127 0062 11       		.uleb128 0x11
 1128 0063 01       		.uleb128 0x1
 1129 0064 12       		.uleb128 0x12
 1130 0065 06       		.uleb128 0x6
 1131 0066 40       		.uleb128 0x40
 1132 0067 18       		.uleb128 0x18
 1133 0068 9642     		.uleb128 0x2116
 1134 006a 19       		.uleb128 0x19
 1135 006b 01       		.uleb128 0x1
 1136 006c 13       		.uleb128 0x13
 1137 006d 00       		.byte	0
 1138 006e 00       		.byte	0
 1139 006f 08       		.uleb128 0x8
 1140 0070 34       		.uleb128 0x34
 1141 0071 00       		.byte	0
 1142 0072 03       		.uleb128 0x3
 1143 0073 0E       		.uleb128 0xe
 1144 0074 3A       		.uleb128 0x3a
 1145 0075 0B       		.uleb128 0xb
 1146 0076 3B       		.uleb128 0x3b
 1147 0077 0B       		.uleb128 0xb
 1148 0078 49       		.uleb128 0x49
 1149 0079 13       		.uleb128 0x13
 1150 007a 02       		.uleb128 0x2
 1151 007b 18       		.uleb128 0x18
 1152 007c 00       		.byte	0
 1153 007d 00       		.byte	0
 1154 007e 09       		.uleb128 0x9
 1155 007f 2E       		.uleb128 0x2e
 1156 0080 00       		.byte	0
 1157 0081 3F       		.uleb128 0x3f
 1158 0082 19       		.uleb128 0x19
 1159 0083 03       		.uleb128 0x3
 1160 0084 0E       		.uleb128 0xe
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 37


 1161 0085 3A       		.uleb128 0x3a
 1162 0086 0B       		.uleb128 0xb
 1163 0087 3B       		.uleb128 0x3b
 1164 0088 0B       		.uleb128 0xb
 1165 0089 27       		.uleb128 0x27
 1166 008a 19       		.uleb128 0x19
 1167 008b 11       		.uleb128 0x11
 1168 008c 01       		.uleb128 0x1
 1169 008d 12       		.uleb128 0x12
 1170 008e 06       		.uleb128 0x6
 1171 008f 40       		.uleb128 0x40
 1172 0090 18       		.uleb128 0x18
 1173 0091 9742     		.uleb128 0x2117
 1174 0093 19       		.uleb128 0x19
 1175 0094 00       		.byte	0
 1176 0095 00       		.byte	0
 1177 0096 0A       		.uleb128 0xa
 1178 0097 2E       		.uleb128 0x2e
 1179 0098 01       		.byte	0x1
 1180 0099 3F       		.uleb128 0x3f
 1181 009a 19       		.uleb128 0x19
 1182 009b 03       		.uleb128 0x3
 1183 009c 0E       		.uleb128 0xe
 1184 009d 3A       		.uleb128 0x3a
 1185 009e 0B       		.uleb128 0xb
 1186 009f 3B       		.uleb128 0x3b
 1187 00a0 05       		.uleb128 0x5
 1188 00a1 27       		.uleb128 0x27
 1189 00a2 19       		.uleb128 0x19
 1190 00a3 11       		.uleb128 0x11
 1191 00a4 01       		.uleb128 0x1
 1192 00a5 12       		.uleb128 0x12
 1193 00a6 06       		.uleb128 0x6
 1194 00a7 40       		.uleb128 0x40
 1195 00a8 18       		.uleb128 0x18
 1196 00a9 9742     		.uleb128 0x2117
 1197 00ab 19       		.uleb128 0x19
 1198 00ac 01       		.uleb128 0x1
 1199 00ad 13       		.uleb128 0x13
 1200 00ae 00       		.byte	0
 1201 00af 00       		.byte	0
 1202 00b0 0B       		.uleb128 0xb
 1203 00b1 05       		.uleb128 0x5
 1204 00b2 00       		.byte	0
 1205 00b3 03       		.uleb128 0x3
 1206 00b4 0E       		.uleb128 0xe
 1207 00b5 3A       		.uleb128 0x3a
 1208 00b6 0B       		.uleb128 0xb
 1209 00b7 3B       		.uleb128 0x3b
 1210 00b8 05       		.uleb128 0x5
 1211 00b9 49       		.uleb128 0x49
 1212 00ba 13       		.uleb128 0x13
 1213 00bb 02       		.uleb128 0x2
 1214 00bc 18       		.uleb128 0x18
 1215 00bd 00       		.byte	0
 1216 00be 00       		.byte	0
 1217 00bf 0C       		.uleb128 0xc
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 38


 1218 00c0 2E       		.uleb128 0x2e
 1219 00c1 00       		.byte	0
 1220 00c2 3F       		.uleb128 0x3f
 1221 00c3 19       		.uleb128 0x19
 1222 00c4 03       		.uleb128 0x3
 1223 00c5 0E       		.uleb128 0xe
 1224 00c6 3A       		.uleb128 0x3a
 1225 00c7 0B       		.uleb128 0xb
 1226 00c8 3B       		.uleb128 0x3b
 1227 00c9 05       		.uleb128 0x5
 1228 00ca 27       		.uleb128 0x27
 1229 00cb 19       		.uleb128 0x19
 1230 00cc 49       		.uleb128 0x49
 1231 00cd 13       		.uleb128 0x13
 1232 00ce 11       		.uleb128 0x11
 1233 00cf 01       		.uleb128 0x1
 1234 00d0 12       		.uleb128 0x12
 1235 00d1 06       		.uleb128 0x6
 1236 00d2 40       		.uleb128 0x40
 1237 00d3 18       		.uleb128 0x18
 1238 00d4 9742     		.uleb128 0x2117
 1239 00d6 19       		.uleb128 0x19
 1240 00d7 00       		.byte	0
 1241 00d8 00       		.byte	0
 1242 00d9 0D       		.uleb128 0xd
 1243 00da 2E       		.uleb128 0x2e
 1244 00db 00       		.byte	0
 1245 00dc 3F       		.uleb128 0x3f
 1246 00dd 19       		.uleb128 0x19
 1247 00de 03       		.uleb128 0x3
 1248 00df 0E       		.uleb128 0xe
 1249 00e0 3A       		.uleb128 0x3a
 1250 00e1 0B       		.uleb128 0xb
 1251 00e2 3B       		.uleb128 0x3b
 1252 00e3 05       		.uleb128 0x5
 1253 00e4 27       		.uleb128 0x27
 1254 00e5 19       		.uleb128 0x19
 1255 00e6 11       		.uleb128 0x11
 1256 00e7 01       		.uleb128 0x1
 1257 00e8 12       		.uleb128 0x12
 1258 00e9 06       		.uleb128 0x6
 1259 00ea 40       		.uleb128 0x40
 1260 00eb 18       		.uleb128 0x18
 1261 00ec 9642     		.uleb128 0x2116
 1262 00ee 19       		.uleb128 0x19
 1263 00ef 00       		.byte	0
 1264 00f0 00       		.byte	0
 1265 00f1 0E       		.uleb128 0xe
 1266 00f2 2E       		.uleb128 0x2e
 1267 00f3 01       		.byte	0x1
 1268 00f4 3F       		.uleb128 0x3f
 1269 00f5 19       		.uleb128 0x19
 1270 00f6 03       		.uleb128 0x3
 1271 00f7 0E       		.uleb128 0xe
 1272 00f8 3A       		.uleb128 0x3a
 1273 00f9 0B       		.uleb128 0xb
 1274 00fa 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 39


 1275 00fb 05       		.uleb128 0x5
 1276 00fc 27       		.uleb128 0x27
 1277 00fd 19       		.uleb128 0x19
 1278 00fe 49       		.uleb128 0x49
 1279 00ff 13       		.uleb128 0x13
 1280 0100 11       		.uleb128 0x11
 1281 0101 01       		.uleb128 0x1
 1282 0102 12       		.uleb128 0x12
 1283 0103 06       		.uleb128 0x6
 1284 0104 40       		.uleb128 0x40
 1285 0105 18       		.uleb128 0x18
 1286 0106 9742     		.uleb128 0x2117
 1287 0108 19       		.uleb128 0x19
 1288 0109 01       		.uleb128 0x1
 1289 010a 13       		.uleb128 0x13
 1290 010b 00       		.byte	0
 1291 010c 00       		.byte	0
 1292 010d 0F       		.uleb128 0xf
 1293 010e 34       		.uleb128 0x34
 1294 010f 00       		.byte	0
 1295 0110 03       		.uleb128 0x3
 1296 0111 0E       		.uleb128 0xe
 1297 0112 3A       		.uleb128 0x3a
 1298 0113 0B       		.uleb128 0xb
 1299 0114 3B       		.uleb128 0x3b
 1300 0115 05       		.uleb128 0x5
 1301 0116 49       		.uleb128 0x49
 1302 0117 13       		.uleb128 0x13
 1303 0118 02       		.uleb128 0x2
 1304 0119 18       		.uleb128 0x18
 1305 011a 00       		.byte	0
 1306 011b 00       		.byte	0
 1307 011c 10       		.uleb128 0x10
 1308 011d 34       		.uleb128 0x34
 1309 011e 00       		.byte	0
 1310 011f 03       		.uleb128 0x3
 1311 0120 0E       		.uleb128 0xe
 1312 0121 3A       		.uleb128 0x3a
 1313 0122 0B       		.uleb128 0xb
 1314 0123 3B       		.uleb128 0x3b
 1315 0124 0B       		.uleb128 0xb
 1316 0125 49       		.uleb128 0x49
 1317 0126 13       		.uleb128 0x13
 1318 0127 3F       		.uleb128 0x3f
 1319 0128 19       		.uleb128 0x19
 1320 0129 02       		.uleb128 0x2
 1321 012a 18       		.uleb128 0x18
 1322 012b 00       		.byte	0
 1323 012c 00       		.byte	0
 1324 012d 00       		.byte	0
 1325              		.section	.debug_aranges,"",%progbits
 1326 0000 94000000 		.4byte	0x94
 1327 0004 0200     		.2byte	0x2
 1328 0006 00000000 		.4byte	.Ldebug_info0
 1329 000a 04       		.byte	0x4
 1330 000b 00       		.byte	0
 1331 000c 0000     		.2byte	0
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 40


 1332 000e 0000     		.2byte	0
 1333 0010 00000000 		.4byte	.LFB0
 1334 0014 20000000 		.4byte	.LFE0-.LFB0
 1335 0018 00000000 		.4byte	.LFB1
 1336 001c 7C000000 		.4byte	.LFE1-.LFB1
 1337 0020 00000000 		.4byte	.LFB2
 1338 0024 20000000 		.4byte	.LFE2-.LFB2
 1339 0028 00000000 		.4byte	.LFB3
 1340 002c 20000000 		.4byte	.LFE3-.LFB3
 1341 0030 00000000 		.4byte	.LFB4
 1342 0034 20000000 		.4byte	.LFE4-.LFB4
 1343 0038 00000000 		.4byte	.LFB5
 1344 003c 20000000 		.4byte	.LFE5-.LFB5
 1345 0040 00000000 		.4byte	.LFB6
 1346 0044 1A000000 		.4byte	.LFE6-.LFB6
 1347 0048 00000000 		.4byte	.LFB7
 1348 004c 20000000 		.4byte	.LFE7-.LFB7
 1349 0050 00000000 		.4byte	.LFB8
 1350 0054 20000000 		.4byte	.LFE8-.LFB8
 1351 0058 00000000 		.4byte	.LFB9
 1352 005c 20000000 		.4byte	.LFE9-.LFB9
 1353 0060 00000000 		.4byte	.LFB10
 1354 0064 18000000 		.4byte	.LFE10-.LFB10
 1355 0068 00000000 		.4byte	.LFB11
 1356 006c 20000000 		.4byte	.LFE11-.LFB11
 1357 0070 00000000 		.4byte	.LFB12
 1358 0074 20000000 		.4byte	.LFE12-.LFB12
 1359 0078 00000000 		.4byte	.LFB13
 1360 007c 18000000 		.4byte	.LFE13-.LFB13
 1361 0080 00000000 		.4byte	.LFB14
 1362 0084 18000000 		.4byte	.LFE14-.LFB14
 1363 0088 00000000 		.4byte	.LFB15
 1364 008c 18000000 		.4byte	.LFE15-.LFB15
 1365 0090 00000000 		.4byte	0
 1366 0094 00000000 		.4byte	0
 1367              		.section	.debug_ranges,"",%progbits
 1368              	.Ldebug_ranges0:
 1369 0000 00000000 		.4byte	.LFB0
 1370 0004 20000000 		.4byte	.LFE0
 1371 0008 00000000 		.4byte	.LFB1
 1372 000c 7C000000 		.4byte	.LFE1
 1373 0010 00000000 		.4byte	.LFB2
 1374 0014 20000000 		.4byte	.LFE2
 1375 0018 00000000 		.4byte	.LFB3
 1376 001c 20000000 		.4byte	.LFE3
 1377 0020 00000000 		.4byte	.LFB4
 1378 0024 20000000 		.4byte	.LFE4
 1379 0028 00000000 		.4byte	.LFB5
 1380 002c 20000000 		.4byte	.LFE5
 1381 0030 00000000 		.4byte	.LFB6
 1382 0034 1A000000 		.4byte	.LFE6
 1383 0038 00000000 		.4byte	.LFB7
 1384 003c 20000000 		.4byte	.LFE7
 1385 0040 00000000 		.4byte	.LFB8
 1386 0044 20000000 		.4byte	.LFE8
 1387 0048 00000000 		.4byte	.LFB9
 1388 004c 20000000 		.4byte	.LFE9
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 41


 1389 0050 00000000 		.4byte	.LFB10
 1390 0054 18000000 		.4byte	.LFE10
 1391 0058 00000000 		.4byte	.LFB11
 1392 005c 20000000 		.4byte	.LFE11
 1393 0060 00000000 		.4byte	.LFB12
 1394 0064 20000000 		.4byte	.LFE12
 1395 0068 00000000 		.4byte	.LFB13
 1396 006c 18000000 		.4byte	.LFE13
 1397 0070 00000000 		.4byte	.LFB14
 1398 0074 18000000 		.4byte	.LFE14
 1399 0078 00000000 		.4byte	.LFB15
 1400 007c 18000000 		.4byte	.LFE15
 1401 0080 00000000 		.4byte	0
 1402 0084 00000000 		.4byte	0
 1403              		.section	.debug_line,"",%progbits
 1404              	.Ldebug_line0:
 1405 0000 83010000 		.section	.debug_str,"MS",%progbits,1
 1405      02004300 
 1405      00000201 
 1405      FB0E0D00 
 1405      01010101 
 1406              	.LASF23:
 1407 0000 50574D5F 		.ascii	"PWM_10_WritePeriod\000"
 1407      31305F57 
 1407      72697465 
 1407      50657269 
 1407      6F6400
 1408              	.LASF25:
 1409 0013 70657269 		.ascii	"period\000"
 1409      6F6400
 1410              	.LASF22:
 1411 001a 50574D5F 		.ascii	"PWM_10_ClearFIFO\000"
 1411      31305F43 
 1411      6C656172 
 1411      4649464F 
 1411      00
 1412              	.LASF20:
 1413 002b 50574D5F 		.ascii	"PWM_10_Init\000"
 1413      31305F49 
 1413      6E697400 
 1414              	.LASF37:
 1415 0037 50574D5F 		.ascii	"PWM_10_ReadPeriod\000"
 1415      31305F52 
 1415      65616450 
 1415      6572696F 
 1415      6400
 1416              	.LASF9:
 1417 0049 666C6F61 		.ascii	"float\000"
 1417      7400
 1418              	.LASF24:
 1419 004f 636F756E 		.ascii	"counter\000"
 1419      74657200 
 1420              	.LASF39:
 1421 0057 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_10.c\000"
 1421      72617465 
 1421      645F536F 
 1421      75726365 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 42


 1421      5C50536F 
 1422              	.LASF1:
 1423 0077 756E7369 		.ascii	"unsigned char\000"
 1423      676E6564 
 1423      20636861 
 1423      7200
 1424              	.LASF13:
 1425 0085 72656738 		.ascii	"reg8\000"
 1425      00
 1426              	.LASF41:
 1427 008a 50574D5F 		.ascii	"PWM_10_ReadControlRegister\000"
 1427      31305F52 
 1427      65616443 
 1427      6F6E7472 
 1427      6F6C5265 
 1428              	.LASF5:
 1429 00a5 6C6F6E67 		.ascii	"long unsigned int\000"
 1429      20756E73 
 1429      69676E65 
 1429      6420696E 
 1429      7400
 1430              	.LASF12:
 1431 00b7 75696E74 		.ascii	"uint8\000"
 1431      3800
 1432              	.LASF34:
 1433 00bd 636F6E74 		.ascii	"control\000"
 1433      726F6C00 
 1434              	.LASF26:
 1435 00c5 50574D5F 		.ascii	"PWM_10_WriteCompare\000"
 1435      31305F57 
 1435      72697465 
 1435      436F6D70 
 1435      61726500 
 1436              	.LASF10:
 1437 00d9 646F7562 		.ascii	"double\000"
 1437      6C6500
 1438              	.LASF16:
 1439 00e0 50574D5F 		.ascii	"PWM_10_interruptState\000"
 1439      31305F69 
 1439      6E746572 
 1439      72757074 
 1439      53746174 
 1440              	.LASF19:
 1441 00f6 50574D5F 		.ascii	"PWM_10_Stop\000"
 1441      31305F53 
 1441      746F7000 
 1442              	.LASF21:
 1443 0102 50574D5F 		.ascii	"PWM_10_WriteCounter\000"
 1443      31305F57 
 1443      72697465 
 1443      436F756E 
 1443      74657200 
 1444              	.LASF17:
 1445 0116 50574D5F 		.ascii	"PWM_10_Start\000"
 1445      31305F53 
 1445      74617274 
 1445      00
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 43


 1446              	.LASF8:
 1447 0123 756E7369 		.ascii	"unsigned int\000"
 1447      676E6564 
 1447      20696E74 
 1447      00
 1448              	.LASF35:
 1449 0130 50574D5F 		.ascii	"PWM_10_ReadCapture\000"
 1449      31305F52 
 1449      65616443 
 1449      61707475 
 1449      726500
 1450              	.LASF7:
 1451 0143 6C6F6E67 		.ascii	"long long unsigned int\000"
 1451      206C6F6E 
 1451      6720756E 
 1451      7369676E 
 1451      65642069 
 1452              	.LASF31:
 1453 015a 50574D5F 		.ascii	"PWM_10_ReadStatusRegister\000"
 1453      31305F52 
 1453      65616453 
 1453      74617475 
 1453      73526567 
 1454              	.LASF32:
 1455 0174 72657375 		.ascii	"result\000"
 1455      6C7400
 1456              	.LASF42:
 1457 017b 50574D5F 		.ascii	"PWM_10_initVar\000"
 1457      31305F69 
 1457      6E697456 
 1457      617200
 1458              	.LASF36:
 1459 018a 50574D5F 		.ascii	"PWM_10_ReadCompare\000"
 1459      31305F52 
 1459      65616443 
 1459      6F6D7061 
 1459      726500
 1460              	.LASF15:
 1461 019d 6374726C 		.ascii	"ctrl\000"
 1461      00
 1462              	.LASF14:
 1463 01a2 73697A65 		.ascii	"sizetype\000"
 1463      74797065 
 1463      00
 1464              	.LASF18:
 1465 01ab 50574D5F 		.ascii	"PWM_10_Enable\000"
 1465      31305F45 
 1465      6E61626C 
 1465      6500
 1466              	.LASF6:
 1467 01b9 6C6F6E67 		.ascii	"long long int\000"
 1467      206C6F6E 
 1467      6720696E 
 1467      7400
 1468              	.LASF29:
 1469 01c7 696E7465 		.ascii	"interruptMode\000"
 1469      72727570 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 44


 1469      744D6F64 
 1469      6500
 1470              	.LASF38:
 1471 01d5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1471      4320342E 
 1471      392E3320 
 1471      32303135 
 1471      30333033 
 1472 0208 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1472      20726576 
 1472      6973696F 
 1472      6E203232 
 1472      31323230 
 1473 023b 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1473      66756E63 
 1473      74696F6E 
 1473      2D736563 
 1473      74696F6E 
 1474              	.LASF33:
 1475 0263 50574D5F 		.ascii	"PWM_10_WriteControlRegister\000"
 1475      31305F57 
 1475      72697465 
 1475      436F6E74 
 1475      726F6C52 
 1476              	.LASF28:
 1477 027f 50574D5F 		.ascii	"PWM_10_SetInterruptMode\000"
 1477      31305F53 
 1477      6574496E 
 1477      74657272 
 1477      7570744D 
 1478              	.LASF2:
 1479 0297 73686F72 		.ascii	"short int\000"
 1479      7420696E 
 1479      7400
 1480              	.LASF40:
 1481 02a1 433A5C55 		.ascii	"C:\\Users\\ben\\Documents\\PSoC Creator\\New Pedal "
 1481      73657273 
 1481      5C62656E 
 1481      5C446F63 
 1481      756D656E 
 1482 02cf 5468696E 		.ascii	"Thingz\\PSOC_BIT_MANGLER\\ADC_DAC.cydsn\000"
 1482      677A5C50 
 1482      534F435F 
 1482      4249545F 
 1482      4D414E47 
 1483              	.LASF4:
 1484 02f5 6C6F6E67 		.ascii	"long int\000"
 1484      20696E74 
 1484      00
 1485              	.LASF11:
 1486 02fe 63686172 		.ascii	"char\000"
 1486      00
 1487              	.LASF30:
 1488 0303 50574D5F 		.ascii	"PWM_10_ReadCounter\000"
 1488      31305F52 
 1488      65616443 
 1488      6F756E74 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccRKz86r.s 			page 45


 1488      657200
 1489              	.LASF0:
 1490 0316 7369676E 		.ascii	"signed char\000"
 1490      65642063 
 1490      68617200 
 1491              	.LASF27:
 1492 0322 636F6D70 		.ascii	"compare\000"
 1492      61726500 
 1493              	.LASF3:
 1494 032a 73686F72 		.ascii	"short unsigned int\000"
 1494      7420756E 
 1494      7369676E 
 1494      65642069 
 1494      6E7400
 1495              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
