ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	PWM_1_initVar
  19              		.bss
  20              		.type	PWM_1_initVar, %object
  21              		.size	PWM_1_initVar, 1
  22              	PWM_1_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.PWM_1_Start,"ax",%progbits
  25              		.align	2
  26              		.global	PWM_1_Start
  27              		.thumb
  28              		.thumb_func
  29              		.type	PWM_1_Start, %function
  30              	PWM_1_Start:
  31              	.LFB0:
  32              		.file 1 "Generated_Source\\PSoC5\\PWM_1.c"
   1:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_1.c **** * File Name: PWM_1.c
   3:Generated_Source\PSoC5/PWM_1.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_1.c **** *
   5:Generated_Source\PSoC5/PWM_1.c **** * Description:
   6:Generated_Source\PSoC5/PWM_1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_1.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_1.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_1.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_1.c **** *
  15:Generated_Source\PSoC5/PWM_1.c **** * Note:
  16:Generated_Source\PSoC5/PWM_1.c **** *
  17:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_1.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_1.c **** 
  24:Generated_Source\PSoC5/PWM_1.c **** #include "PWM_1.h"
  25:Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 2


  26:Generated_Source\PSoC5/PWM_1.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_1.c **** #ifdef PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_1.c **** #endif /* PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM_1.c **** 
  32:Generated_Source\PSoC5/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_1.c **** 
  34:Generated_Source\PSoC5/PWM_1.c **** 
  35:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Start
  37:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_1.c **** *
  39:Generated_Source\PSoC5/PWM_1.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_1.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_1.c **** *
  44:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_1.c **** *  None
  46:Generated_Source\PSoC5/PWM_1.c **** *
  47:Generated_Source\PSoC5/PWM_1.c **** * Return:
  48:Generated_Source\PSoC5/PWM_1.c **** *  None
  49:Generated_Source\PSoC5/PWM_1.c **** *
  50:Generated_Source\PSoC5/PWM_1.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_1.c **** *
  54:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Start(void) 
  56:Generated_Source\PSoC5/PWM_1.c **** {
  33              		.loc 1 56 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  57:Generated_Source\PSoC5/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_1.c ****     if(PWM_1_initVar == 0u)
  43              		.loc 1 58 0
  44 0004 054B     		ldr	r3, .L3
  45 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46 0008 002B     		cmp	r3, #0
  47 000a 04D1     		bne	.L2
  59:Generated_Source\PSoC5/PWM_1.c ****     {
  60:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_Init();
  48              		.loc 1 60 0
  49 000c FFF7FEFF 		bl	PWM_1_Init
  61:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_initVar = 1u;
  50              		.loc 1 61 0
  51 0010 024B     		ldr	r3, .L3
  52 0012 0122     		movs	r2, #1
  53 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 3


  54              	.L2:
  62:Generated_Source\PSoC5/PWM_1.c ****     }
  63:Generated_Source\PSoC5/PWM_1.c ****     PWM_1_Enable();
  55              		.loc 1 63 0
  56 0016 FFF7FEFF 		bl	PWM_1_Enable
  64:Generated_Source\PSoC5/PWM_1.c **** 
  65:Generated_Source\PSoC5/PWM_1.c **** }
  57              		.loc 1 65 0
  58 001a 80BD     		pop	{r7, pc}
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 001c 00000000 		.word	PWM_1_initVar
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	PWM_1_Start, .-PWM_1_Start
  66              		.section	.text.PWM_1_Init,"ax",%progbits
  67              		.align	2
  68              		.global	PWM_1_Init
  69              		.thumb
  70              		.thumb_func
  71              		.type	PWM_1_Init, %function
  72              	PWM_1_Init:
  73              	.LFB1:
  66:Generated_Source\PSoC5/PWM_1.c **** 
  67:Generated_Source\PSoC5/PWM_1.c **** 
  68:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Init
  70:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_1.c **** *
  72:Generated_Source\PSoC5/PWM_1.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_Start().
  76:Generated_Source\PSoC5/PWM_1.c **** *
  77:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_1.c **** *  None
  79:Generated_Source\PSoC5/PWM_1.c **** *
  80:Generated_Source\PSoC5/PWM_1.c **** * Return:
  81:Generated_Source\PSoC5/PWM_1.c **** *  None
  82:Generated_Source\PSoC5/PWM_1.c **** *
  83:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Init(void) 
  85:Generated_Source\PSoC5/PWM_1.c **** {
  74              		.loc 1 85 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 82B0     		sub	sp, sp, #8
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  86:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 4


  87:Generated_Source\PSoC5/PWM_1.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction || PWM_1_UseControl) */
  89:Generated_Source\PSoC5/PWM_1.c **** 
  90:Generated_Source\PSoC5/PWM_1.c ****     #if(!PWM_1_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
  92:Generated_Source\PSoC5/PWM_1.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_1.c ****             uint8 PWM_1_interruptState;
  94:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
  95:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_1.c **** 
  97:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_1.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= PWM_1_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_1.c **** 
 104:Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL3 & ((uint8 )(~PWM_1_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL3 = ctrl | PWM_1_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_1.c **** 
 107:Generated_Source\PSoC5/PWM_1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNC;
 110:Generated_Source\PSoC5/PWM_1.c **** 
 111:Generated_Source\PSoC5/PWM_1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_1.c **** 
 115:Generated_Source\PSoC5/PWM_1.c ****     #elif (PWM_1_UseControl)
 116:Generated_Source\PSoC5/PWM_1.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL & ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)) &
  86              		.loc 1 117 0
  87 0006 154B     		ldr	r3, .L6
  88 0008 1B78     		ldrb	r3, [r3]
  89 000a DBB2     		uxtb	r3, r3
  90 000c 23F03F03 		bic	r3, r3, #63
  91 0010 FB71     		strb	r3, [r7, #7]
 118:Generated_Source\PSoC5/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL = ctrl | PWM_1_DEFAULT_COMPARE2_MODE |
  92              		.loc 1 119 0
  93 0012 124A     		ldr	r2, .L6
  94 0014 FB79     		ldrb	r3, [r7, #7]
  95 0016 43F00A03 		orr	r3, r3, #10
  96 001a DBB2     		uxtb	r3, r3
  97 001c 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_1.c **** 
 123:Generated_Source\PSoC5/PWM_1.c ****     #if (!PWM_1_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM_1.c ****         #else /* (PWM_1_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
  98              		.loc 1 129 0
  99 001e 104A     		ldr	r2, .L6+4
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 5


 100 0020 0F4B     		ldr	r3, .L6+4
 101 0022 1B78     		ldrb	r3, [r3]
 102 0024 DBB2     		uxtb	r3, r3
 103 0026 43F00103 		orr	r3, r3, #1
 104 002a DBB2     		uxtb	r3, r3
 105 002c 1370     		strb	r3, [r2]
 130:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP1 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 106              		.loc 1 130 0
 107 002e 0D4A     		ldr	r2, .L6+8
 108 0030 0C4B     		ldr	r3, .L6+8
 109 0032 1B78     		ldrb	r3, [r3]
 110 0034 DBB2     		uxtb	r3, r3
 111 0036 43F00103 		orr	r3, r3, #1
 112 003a DBB2     		uxtb	r3, r3
 113 003c 1370     		strb	r3, [r2]
 131:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_1.c **** 
 133:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_WriteCounter(PWM_1_INIT_PERIOD_VALUE);
 114              		.loc 1 133 0
 115 003e 4FF40050 		mov	r0, #8192
 116 0042 FFF7FEFF 		bl	PWM_1_WriteCounter
 134:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_1.c **** 
 136:Generated_Source\PSoC5/PWM_1.c ****     PWM_1_WritePeriod(PWM_1_INIT_PERIOD_VALUE);
 117              		.loc 1 136 0
 118 0046 4FF40050 		mov	r0, #8192
 119 004a FFF7FEFF 		bl	PWM_1_WritePeriod
 137:Generated_Source\PSoC5/PWM_1.c **** 
 138:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_INIT_COMPARE_VALUE1);
 120              		.loc 1 139 0
 121 004e 4FF48050 		mov	r0, #4096
 122 0052 FFF7FEFF 		bl	PWM_1_WriteCompare
 140:Generated_Source\PSoC5/PWM_1.c ****         #else
 141:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare1(PWM_1_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare2(PWM_1_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_1.c **** 
 145:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteKillTime(PWM_1_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_1.c **** 
 149:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteDeadTime(PWM_1_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_1.c **** 
 153:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_1.c **** 
 157:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_1.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL2 |= PWM_1_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_1.c ****     #else
 163:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 6


 164:Generated_Source\PSoC5/PWM_1.c **** 
 165:Generated_Source\PSoC5/PWM_1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_1.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_STATUS_AUX_CTRL |= PWM_1_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM_1.c **** 
 171:Generated_Source\PSoC5/PWM_1.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_1.c ****             CyExitCriticalSection(PWM_1_interruptState);
 173:Generated_Source\PSoC5/PWM_1.c **** 
 174:Generated_Source\PSoC5/PWM_1.c ****             /* Clear the FIFO to enable the PWM_1_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_1.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_ClearFIFO();
 177:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 178:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_1.c **** }
 123              		.loc 1 179 0
 124 0056 0837     		adds	r7, r7, #8
 125              		.cfi_def_cfa_offset 8
 126 0058 BD46     		mov	sp, r7
 127              		.cfi_def_cfa_register 13
 128              		@ sp needed
 129 005a 80BD     		pop	{r7, pc}
 130              	.L7:
 131              		.align	2
 132              	.L6:
 133 005c 7A640040 		.word	1073767546
 134 0060 9E640040 		.word	1073767582
 135 0064 9F640040 		.word	1073767583
 136              		.cfi_endproc
 137              	.LFE1:
 138              		.size	PWM_1_Init, .-PWM_1_Init
 139              		.section	.text.PWM_1_Enable,"ax",%progbits
 140              		.align	2
 141              		.global	PWM_1_Enable
 142              		.thumb
 143              		.thumb_func
 144              		.type	PWM_1_Enable, %function
 145              	PWM_1_Enable:
 146              	.LFB2:
 180:Generated_Source\PSoC5/PWM_1.c **** 
 181:Generated_Source\PSoC5/PWM_1.c **** 
 182:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Enable
 184:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_1.c **** *
 186:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_1.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_1.c **** *
 189:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_1.c **** *  None
 191:Generated_Source\PSoC5/PWM_1.c **** *
 192:Generated_Source\PSoC5/PWM_1.c **** * Return:
 193:Generated_Source\PSoC5/PWM_1.c **** *  None
 194:Generated_Source\PSoC5/PWM_1.c **** *
 195:Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_1.c **** *  This works only if software enable mode is chosen
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 7


 197:Generated_Source\PSoC5/PWM_1.c **** *
 198:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Enable(void) 
 200:Generated_Source\PSoC5/PWM_1.c **** {
 147              		.loc 1 200 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152 0000 80B4     		push	{r7}
 153              		.cfi_def_cfa_offset 4
 154              		.cfi_offset 7, -4
 155 0002 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 201:Generated_Source\PSoC5/PWM_1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE |= PWM_1_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_1.c **** 
 207:Generated_Source\PSoC5/PWM_1.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CTRL_ENABLE;
 157              		.loc 1 209 0
 158 0004 054A     		ldr	r2, .L9
 159 0006 054B     		ldr	r3, .L9
 160 0008 1B78     		ldrb	r3, [r3]
 161 000a DBB2     		uxtb	r3, r3
 162 000c 63F07F03 		orn	r3, r3, #127
 163 0010 DBB2     		uxtb	r3, r3
 164 0012 1370     		strb	r3, [r2]
 210:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_1.c **** }
 165              		.loc 1 211 0
 166 0014 BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 0016 5DF8047B 		ldr	r7, [sp], #4
 170              		.cfi_restore 7
 171              		.cfi_def_cfa_offset 0
 172 001a 7047     		bx	lr
 173              	.L10:
 174              		.align	2
 175              	.L9:
 176 001c 7A640040 		.word	1073767546
 177              		.cfi_endproc
 178              	.LFE2:
 179              		.size	PWM_1_Enable, .-PWM_1_Enable
 180              		.section	.text.PWM_1_Stop,"ax",%progbits
 181              		.align	2
 182              		.global	PWM_1_Stop
 183              		.thumb
 184              		.thumb_func
 185              		.type	PWM_1_Stop, %function
 186              	PWM_1_Stop:
 187              	.LFB3:
 212:Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 8


 213:Generated_Source\PSoC5/PWM_1.c **** 
 214:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Stop
 216:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_1.c **** *
 218:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_1.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_1.c **** *
 222:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_1.c **** *  None
 224:Generated_Source\PSoC5/PWM_1.c **** *
 225:Generated_Source\PSoC5/PWM_1.c **** * Return:
 226:Generated_Source\PSoC5/PWM_1.c **** *  None
 227:Generated_Source\PSoC5/PWM_1.c **** *
 228:Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_1.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_1.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_1.c **** *
 232:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Stop(void) 
 234:Generated_Source\PSoC5/PWM_1.c **** {
 188              		.loc 1 234 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 7, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
 235:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_ENABLE));
 198              		.loc 1 236 0
 199 0004 054A     		ldr	r2, .L12
 200 0006 054B     		ldr	r3, .L12
 201 0008 1B78     		ldrb	r3, [r3]
 202 000a DBB2     		uxtb	r3, r3
 203 000c 03F07F03 		and	r3, r3, #127
 204 0010 DBB2     		uxtb	r3, r3
 205 0012 1370     		strb	r3, [r2]
 237:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_1.c **** 
 239:Generated_Source\PSoC5/PWM_1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE &= ((uint8)(~PWM_1_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_1_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_1.c **** }
 206              		.loc 1 244 0
 207 0014 BD46     		mov	sp, r7
 208              		.cfi_def_cfa_register 13
 209              		@ sp needed
 210 0016 5DF8047B 		ldr	r7, [sp], #4
 211              		.cfi_restore 7
 212              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 9


 213 001a 7047     		bx	lr
 214              	.L13:
 215              		.align	2
 216              	.L12:
 217 001c 7A640040 		.word	1073767546
 218              		.cfi_endproc
 219              	.LFE3:
 220              		.size	PWM_1_Stop, .-PWM_1_Stop
 221              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
 222              		.align	2
 223              		.global	PWM_1_WriteCounter
 224              		.thumb
 225              		.thumb_func
 226              		.type	PWM_1_WriteCounter, %function
 227              	PWM_1_WriteCounter:
 228              	.LFB4:
 245:Generated_Source\PSoC5/PWM_1.c **** 
 246:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_1.c **** 
 249:Generated_Source\PSoC5/PWM_1.c **** 
 250:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode
 252:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_1.c ****         *
 254:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_1.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_1.c ****         *
 258:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_1.c ****         *
 262:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_1.c ****         *  None
 264:Generated_Source\PSoC5/PWM_1.c ****         *
 265:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_1.c ****         {
 268:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_1.c **** 
 270:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SH
 272:Generated_Source\PSoC5/PWM_1.c ****                 #else
 273:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_1.c **** 
 276:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_1.c **** 
 279:Generated_Source\PSoC5/PWM_1.c ****             #elif (PWM_1_UseControl)
 280:Generated_Source\PSoC5/PWM_1.c **** 
 281:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_S
 283:Generated_Source\PSoC5/PWM_1.c ****                                                 PWM_1_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_1.c ****                 #else
 285:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 10


 286:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_1.c **** 
 288:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_S
 290:Generated_Source\PSoC5/PWM_1.c ****                                                PWM_1_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_1.c ****                 #else
 292:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_1.c **** 
 295:Generated_Source\PSoC5/PWM_1.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~(PWM_1_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_1.c ****                                             PWM_1_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_1.c **** 
 300:Generated_Source\PSoC5/PWM_1.c ****             #else
 301:Generated_Source\PSoC5/PWM_1.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_1.c ****         }
 304:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_1.c **** 
 306:Generated_Source\PSoC5/PWM_1.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_1.c **** 
 308:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_1.c **** 
 310:Generated_Source\PSoC5/PWM_1.c **** 
 311:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_1.c ****         *
 315:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_1.c ****         *
 318:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM_1.c ****         *
 322:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_1.c ****         *  None
 324:Generated_Source\PSoC5/PWM_1.c ****         *
 325:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_1.c ****         {
 328:Generated_Source\PSoC5/PWM_1.c ****             #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SHIFT)
 330:Generated_Source\PSoC5/PWM_1.c ****                                            PWM_1_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_1.c ****             #else
 332:Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_1.c **** 
 335:Generated_Source\PSoC5/PWM_1.c ****             #if (PWM_1_UseControl)
 336:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UseControl) */
 339:Generated_Source\PSoC5/PWM_1.c ****         }
 340:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_1.c **** 
 342:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_CompareMode2SW)
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 11


 343:Generated_Source\PSoC5/PWM_1.c **** 
 344:Generated_Source\PSoC5/PWM_1.c **** 
 345:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetCompareMode2
 347:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_1.c ****     *
 349:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_1.c ****     *
 352:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_1.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_1.c ****     *
 356:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_1.c ****     *  None
 358:Generated_Source\PSoC5/PWM_1.c ****     *
 359:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_1.c ****     {
 362:Generated_Source\PSoC5/PWM_1.c **** 
 363:Generated_Source\PSoC5/PWM_1.c ****         #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM_1.c ****                                                  PWM_1_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_1.c ****         #else
 367:Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_1.c **** 
 370:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseControl)
 371:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseControl) */
 374:Generated_Source\PSoC5/PWM_1.c ****     }
 375:Generated_Source\PSoC5/PWM_1.c ****     #endif /*PWM_1_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_1.c **** 
 377:Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM_1.c **** 
 379:Generated_Source\PSoC5/PWM_1.c **** 
 380:Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_1.c **** 
 382:Generated_Source\PSoC5/PWM_1.c **** 
 383:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCounter
 385:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_1.c ****     *
 387:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_1.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_1.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_1.c ****     *
 393:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_1.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_1.c ****     *
 396:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_1.c ****     *  None
 398:Generated_Source\PSoC5/PWM_1.c ****     *
 399:Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 12


 400:Generated_Source\PSoC5/PWM_1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_1.c ****     *
 402:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCounter(uint16 counter) \
 404:Generated_Source\PSoC5/PWM_1.c ****                                        
 405:Generated_Source\PSoC5/PWM_1.c ****     {
 229              		.loc 1 405 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 8
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 0000 80B4     		push	{r7}
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 7, -4
 237 0002 83B0     		sub	sp, sp, #12
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              		.cfi_def_cfa_register 7
 241 0006 0346     		mov	r3, r0
 242 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 406:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_COUNTER_LSB_PTR, counter);
 243              		.loc 1 406 0
 244 000a 044A     		ldr	r2, .L15
 245 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 246 000e 1380     		strh	r3, [r2]	@ movhi
 407:Generated_Source\PSoC5/PWM_1.c ****     }
 247              		.loc 1 407 0
 248 0010 0C37     		adds	r7, r7, #12
 249              		.cfi_def_cfa_offset 4
 250 0012 BD46     		mov	sp, r7
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 0014 5DF8047B 		ldr	r7, [sp], #4
 254              		.cfi_restore 7
 255              		.cfi_def_cfa_offset 0
 256 0018 7047     		bx	lr
 257              	.L16:
 258 001a 00BF     		.align	2
 259              	.L15:
 260 001c 1C680040 		.word	1073768476
 261              		.cfi_endproc
 262              	.LFE4:
 263              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
 264              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
 265              		.align	2
 266              		.global	PWM_1_ReadCounter
 267              		.thumb
 268              		.thumb_func
 269              		.type	PWM_1_ReadCounter, %function
 270              	PWM_1_ReadCounter:
 271              	.LFB5:
 408:Generated_Source\PSoC5/PWM_1.c **** 
 409:Generated_Source\PSoC5/PWM_1.c **** 
 410:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCounter
 412:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_1.c ****     *
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 13


 414:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_1.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM_1.c ****     *
 418:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_1.c ****     *  None
 420:Generated_Source\PSoC5/PWM_1.c ****     *
 421:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_1.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_1.c ****     *
 424:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_1.c ****     {
 272              		.loc 1 426 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 0000 80B4     		push	{r7}
 278              		.cfi_def_cfa_offset 4
 279              		.cfi_offset 7, -4
 280 0002 00AF     		add	r7, sp, #0
 281              		.cfi_def_cfa_register 7
 427:Generated_Source\PSoC5/PWM_1.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_1.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_1.c ****           (void)CY_GET_REG8(PWM_1_COUNTERCAP_LSB_PTR_8BIT);
 282              		.loc 1 430 0
 283 0004 044B     		ldr	r3, .L19
 284 0006 1B78     		ldrb	r3, [r3]
 431:Generated_Source\PSoC5/PWM_1.c **** 
 432:Generated_Source\PSoC5/PWM_1.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_CAPTURE_LSB_PTR));
 285              		.loc 1 433 0
 286 0008 044B     		ldr	r3, .L19+4
 287 000a 1B88     		ldrh	r3, [r3]	@ movhi
 288 000c 9BB2     		uxth	r3, r3
 434:Generated_Source\PSoC5/PWM_1.c ****     }
 289              		.loc 1 434 0
 290 000e 1846     		mov	r0, r3
 291 0010 BD46     		mov	sp, r7
 292              		.cfi_def_cfa_register 13
 293              		@ sp needed
 294 0012 5DF8047B 		ldr	r7, [sp], #4
 295              		.cfi_restore 7
 296              		.cfi_def_cfa_offset 0
 297 0016 7047     		bx	lr
 298              	.L20:
 299              		.align	2
 300              	.L19:
 301 0018 1E640040 		.word	1073767454
 302 001c BC680040 		.word	1073768636
 303              		.cfi_endproc
 304              	.LFE5:
 305              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 306              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 307              		.align	2
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 14


 308              		.global	PWM_1_WritePeriod
 309              		.thumb
 310              		.thumb_func
 311              		.type	PWM_1_WritePeriod, %function
 312              	PWM_1_WritePeriod:
 313              	.LFB6:
 435:Generated_Source\PSoC5/PWM_1.c **** 
 436:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus)
 437:Generated_Source\PSoC5/PWM_1.c **** 
 438:Generated_Source\PSoC5/PWM_1.c **** 
 439:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_ClearFIFO
 441:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_1.c ****         *
 443:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_1.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_1.c ****         *
 446:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_1.c ****         *  None
 448:Generated_Source\PSoC5/PWM_1.c ****         *
 449:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_1.c ****         *  None
 451:Generated_Source\PSoC5/PWM_1.c ****         *
 452:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_1.c ****         {
 455:Generated_Source\PSoC5/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM_1.c ****             {
 457:Generated_Source\PSoC5/PWM_1.c ****                 (void)PWM_1_ReadCapture();
 458:Generated_Source\PSoC5/PWM_1.c ****             }
 459:Generated_Source\PSoC5/PWM_1.c ****         }
 460:Generated_Source\PSoC5/PWM_1.c **** 
 461:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_UseStatus */
 462:Generated_Source\PSoC5/PWM_1.c **** 
 463:Generated_Source\PSoC5/PWM_1.c **** #endif /* !PWM_1_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_1.c **** 
 465:Generated_Source\PSoC5/PWM_1.c **** 
 466:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 468:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_1.c **** *
 470:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_1.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_1.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_1.c **** *
 474:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_1.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_1.c **** *
 478:Generated_Source\PSoC5/PWM_1.c **** * Return:
 479:Generated_Source\PSoC5/PWM_1.c **** *  None
 480:Generated_Source\PSoC5/PWM_1.c **** *
 481:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_WritePeriod(uint16 period) 
 483:Generated_Source\PSoC5/PWM_1.c **** {
 314              		.loc 1 483 0
 315              		.cfi_startproc
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 15


 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319 0000 80B4     		push	{r7}
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 7, -4
 322 0002 83B0     		sub	sp, sp, #12
 323              		.cfi_def_cfa_offset 16
 324 0004 00AF     		add	r7, sp, #0
 325              		.cfi_def_cfa_register 7
 326 0006 0346     		mov	r3, r0
 327 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 484:Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_1.c ****     #else
 487:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, period);
 328              		.loc 1 487 0
 329 000a 044A     		ldr	r2, .L22
 330 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 331 000e 1380     		strh	r3, [r2]	@ movhi
 488:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_1.c **** }
 332              		.loc 1 489 0
 333 0010 0C37     		adds	r7, r7, #12
 334              		.cfi_def_cfa_offset 4
 335 0012 BD46     		mov	sp, r7
 336              		.cfi_def_cfa_register 13
 337              		@ sp needed
 338 0014 5DF8047B 		ldr	r7, [sp], #4
 339              		.cfi_restore 7
 340              		.cfi_def_cfa_offset 0
 341 0018 7047     		bx	lr
 342              	.L23:
 343 001a 00BF     		.align	2
 344              	.L22:
 345 001c 9C680040 		.word	1073768604
 346              		.cfi_endproc
 347              	.LFE6:
 348              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 349              		.section	.text.PWM_1_WriteCompare,"ax",%progbits
 350              		.align	2
 351              		.global	PWM_1_WriteCompare
 352              		.thumb
 353              		.thumb_func
 354              		.type	PWM_1_WriteCompare, %function
 355              	PWM_1_WriteCompare:
 356              	.LFB7:
 490:Generated_Source\PSoC5/PWM_1.c **** 
 491:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_1.c **** 
 493:Generated_Source\PSoC5/PWM_1.c **** 
 494:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare
 496:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_1.c ****     *
 498:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 16


 500:Generated_Source\PSoC5/PWM_1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM_1.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_1.c ****     *
 505:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_1.c ****     *
 508:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_1.c ****     *  None
 510:Generated_Source\PSoC5/PWM_1.c ****     *
 511:Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_1.c ****     *
 515:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare(uint16 compare) \
 517:Generated_Source\PSoC5/PWM_1.c ****                                        
 518:Generated_Source\PSoC5/PWM_1.c ****     {
 357              		.loc 1 518 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 8
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362 0000 80B4     		push	{r7}
 363              		.cfi_def_cfa_offset 4
 364              		.cfi_offset 7, -4
 365 0002 83B0     		sub	sp, sp, #12
 366              		.cfi_def_cfa_offset 16
 367 0004 00AF     		add	r7, sp, #0
 368              		.cfi_def_cfa_register 7
 369 0006 0346     		mov	r3, r0
 370 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 519:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM_1.c ****         #else
 522:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, compare);
 371              		.loc 1 522 0
 372 000a 044A     		ldr	r2, .L25
 373 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 374 000e 1380     		strh	r3, [r2]	@ movhi
 523:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_1.c **** 
 525:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_PWMMode == PWM_1__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_1.c ****             #else
 529:Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_PWMMode == PWM_1__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_1.c ****     }
 375              		.loc 1 532 0
 376 0010 0C37     		adds	r7, r7, #12
 377              		.cfi_def_cfa_offset 4
 378 0012 BD46     		mov	sp, r7
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 17


 381 0014 5DF8047B 		ldr	r7, [sp], #4
 382              		.cfi_restore 7
 383              		.cfi_def_cfa_offset 0
 384 0018 7047     		bx	lr
 385              	.L26:
 386 001a 00BF     		.align	2
 387              	.L25:
 388 001c 5C680040 		.word	1073768540
 389              		.cfi_endproc
 390              	.LFE7:
 391              		.size	PWM_1_WriteCompare, .-PWM_1_WriteCompare
 392              		.section	.text.PWM_1_ReadControlRegister,"ax",%progbits
 393              		.align	2
 394              		.global	PWM_1_ReadControlRegister
 395              		.thumb
 396              		.thumb_func
 397              		.type	PWM_1_ReadControlRegister, %function
 398              	PWM_1_ReadControlRegister:
 399              	.LFB8:
 533:Generated_Source\PSoC5/PWM_1.c **** 
 534:Generated_Source\PSoC5/PWM_1.c **** 
 535:Generated_Source\PSoC5/PWM_1.c **** #else
 536:Generated_Source\PSoC5/PWM_1.c **** 
 537:Generated_Source\PSoC5/PWM_1.c **** 
 538:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare1
 540:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM_1.c ****     *
 542:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_1.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_1.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_1.c ****     *
 548:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_1.c ****     *
 551:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_1.c ****     *  None
 553:Generated_Source\PSoC5/PWM_1.c ****     *
 554:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare1(uint16 compare) \
 556:Generated_Source\PSoC5/PWM_1.c ****                                         
 557:Generated_Source\PSoC5/PWM_1.c ****     {
 558:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM_1.c ****         #else
 561:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_1.c ****     }
 564:Generated_Source\PSoC5/PWM_1.c **** 
 565:Generated_Source\PSoC5/PWM_1.c **** 
 566:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare2
 568:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_1.c ****     *
 570:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 18


 571:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_1.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_1.c ****     *
 577:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM_1.c ****     *
 580:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_1.c ****     *  None
 582:Generated_Source\PSoC5/PWM_1.c ****     *
 583:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare2(uint16 compare) \
 585:Generated_Source\PSoC5/PWM_1.c ****                                         
 586:Generated_Source\PSoC5/PWM_1.c ****     {
 587:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_1.c ****         #else
 590:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_1.c ****     }
 593:Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_1.c **** 
 595:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_1.c **** 
 597:Generated_Source\PSoC5/PWM_1.c **** 
 598:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_1.c ****     *
 602:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_1.c ****     *
 605:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_1.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_1.c ****     *
 608:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_1.c ****     *  None
 610:Generated_Source\PSoC5/PWM_1.c ****     *
 611:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_1.c ****     {
 614:Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM_1.c ****         #else
 618:Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_1.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_DEADBAND_COUNT &= ((uint8)(~PWM_1_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM_1.c **** 
 622:Generated_Source\PSoC5/PWM_1.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_1_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM_1.c ****                                                     PWM_1_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_1.c ****             #else
 627:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= deadtime & PWM_1_DEADBAND_COUNT_MASK;
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 19


 628:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM_1.c **** 
 630:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_1.c ****     }
 632:Generated_Source\PSoC5/PWM_1.c **** 
 633:Generated_Source\PSoC5/PWM_1.c **** 
 634:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadDeadTime
 636:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_1.c ****     *
 638:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_1.c ****     *
 641:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_1.c ****     *  None
 643:Generated_Source\PSoC5/PWM_1.c ****     *
 644:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_1.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_1.c ****     *
 647:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_1.c ****     {
 650:Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG8(PWM_1_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_1.c ****         #else
 654:Generated_Source\PSoC5/PWM_1.c **** 
 655:Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_1.c ****                 return ((uint8)(((uint8)(PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM_1.c ****                                                                            PWM_1_DEADBAND_COUNT_SHI
 659:Generated_Source\PSoC5/PWM_1.c ****             #else
 660:Generated_Source\PSoC5/PWM_1.c ****                 return (PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_1.c ****     }
 664:Generated_Source\PSoC5/PWM_1.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_1.c **** 
 666:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_1.c **** 
 668:Generated_Source\PSoC5/PWM_1.c **** 
 669:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_1.c ****     *
 673:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM_1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_1.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_1.c ****     *
 677:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_1.c ****     *
 680:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_1.c ****     *  None
 682:Generated_Source\PSoC5/PWM_1.c ****     *
 683:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetInterruptMode(uint8 interruptMode) 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 20


 685:Generated_Source\PSoC5/PWM_1.c ****     {
 686:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_STATUS_MASK_PTR, interruptMode);
 687:Generated_Source\PSoC5/PWM_1.c ****     }
 688:Generated_Source\PSoC5/PWM_1.c **** 
 689:Generated_Source\PSoC5/PWM_1.c **** 
 690:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_1.c ****     *
 694:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_1.c ****     *
 697:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_1.c ****     *  None
 699:Generated_Source\PSoC5/PWM_1.c ****     *
 700:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_1.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_1.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_1.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM_1.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM_1.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM_1.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_1.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_1.c ****     *
 710:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM_1.c ****     {
 713:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_STATUS_PTR));
 714:Generated_Source\PSoC5/PWM_1.c ****     }
 715:Generated_Source\PSoC5/PWM_1.c **** 
 716:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_1.c **** 
 718:Generated_Source\PSoC5/PWM_1.c **** 
 719:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseControl)
 720:Generated_Source\PSoC5/PWM_1.c **** 
 721:Generated_Source\PSoC5/PWM_1.c **** 
 722:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_1.c ****     *
 726:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_1.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_1.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_1.c ****     *
 730:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_1.c ****     *  None
 732:Generated_Source\PSoC5/PWM_1.c ****     *
 733:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_1.c ****     *
 736:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM_1.c ****     {
 400              		.loc 1 738 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 21


 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405 0000 80B4     		push	{r7}
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 7, -4
 408 0002 83B0     		sub	sp, sp, #12
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 739:Generated_Source\PSoC5/PWM_1.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_1.c **** 
 741:Generated_Source\PSoC5/PWM_1.c ****         result = CY_GET_REG8(PWM_1_CONTROL_PTR);
 412              		.loc 1 741 0
 413 0006 054B     		ldr	r3, .L29
 414 0008 1B78     		ldrb	r3, [r3]
 415 000a FB71     		strb	r3, [r7, #7]
 742:Generated_Source\PSoC5/PWM_1.c ****         return (result);
 416              		.loc 1 742 0
 417 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743:Generated_Source\PSoC5/PWM_1.c ****     }
 418              		.loc 1 743 0
 419 000e 1846     		mov	r0, r3
 420 0010 0C37     		adds	r7, r7, #12
 421              		.cfi_def_cfa_offset 4
 422 0012 BD46     		mov	sp, r7
 423              		.cfi_def_cfa_register 13
 424              		@ sp needed
 425 0014 5DF8047B 		ldr	r7, [sp], #4
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0018 7047     		bx	lr
 429              	.L30:
 430 001a 00BF     		.align	2
 431              	.L29:
 432 001c 7A640040 		.word	1073767546
 433              		.cfi_endproc
 434              	.LFE8:
 435              		.size	PWM_1_ReadControlRegister, .-PWM_1_ReadControlRegister
 436              		.section	.text.PWM_1_WriteControlRegister,"ax",%progbits
 437              		.align	2
 438              		.global	PWM_1_WriteControlRegister
 439              		.thumb
 440              		.thumb_func
 441              		.type	PWM_1_WriteControlRegister, %function
 442              	PWM_1_WriteControlRegister:
 443              	.LFB9:
 744:Generated_Source\PSoC5/PWM_1.c **** 
 745:Generated_Source\PSoC5/PWM_1.c **** 
 746:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_1.c ****     *
 750:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_1.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_1.c ****     *
 754:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 22


 755:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM_1.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_1.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_1.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_1.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_1.c ****     *
 761:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_1.c ****     *  None
 763:Generated_Source\PSoC5/PWM_1.c ****     *
 764:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_1.c ****     {
 444              		.loc 1 766 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 8
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449 0000 80B4     		push	{r7}
 450              		.cfi_def_cfa_offset 4
 451              		.cfi_offset 7, -4
 452 0002 83B0     		sub	sp, sp, #12
 453              		.cfi_def_cfa_offset 16
 454 0004 00AF     		add	r7, sp, #0
 455              		.cfi_def_cfa_register 7
 456 0006 0346     		mov	r3, r0
 457 0008 FB71     		strb	r3, [r7, #7]
 767:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_CONTROL_PTR, control);
 458              		.loc 1 767 0
 459 000a 044A     		ldr	r2, .L32
 460 000c FB79     		ldrb	r3, [r7, #7]
 461 000e 1370     		strb	r3, [r2]
 768:Generated_Source\PSoC5/PWM_1.c ****     }
 462              		.loc 1 768 0
 463 0010 0C37     		adds	r7, r7, #12
 464              		.cfi_def_cfa_offset 4
 465 0012 BD46     		mov	sp, r7
 466              		.cfi_def_cfa_register 13
 467              		@ sp needed
 468 0014 5DF8047B 		ldr	r7, [sp], #4
 469              		.cfi_restore 7
 470              		.cfi_def_cfa_offset 0
 471 0018 7047     		bx	lr
 472              	.L33:
 473 001a 00BF     		.align	2
 474              	.L32:
 475 001c 7A640040 		.word	1073767546
 476              		.cfi_endproc
 477              	.LFE9:
 478              		.size	PWM_1_WriteControlRegister, .-PWM_1_WriteControlRegister
 479              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 480              		.align	2
 481              		.global	PWM_1_ReadCapture
 482              		.thumb
 483              		.thumb_func
 484              		.type	PWM_1_ReadCapture, %function
 485              	PWM_1_ReadCapture:
 486              	.LFB10:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 23


 769:Generated_Source\PSoC5/PWM_1.c **** 
 770:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseControl) */
 771:Generated_Source\PSoC5/PWM_1.c **** 
 772:Generated_Source\PSoC5/PWM_1.c **** 
 773:Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_1.c **** 
 775:Generated_Source\PSoC5/PWM_1.c **** 
 776:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCapture
 778:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_1.c ****     *
 780:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_1.c ****     *
 783:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_1.c ****     *  None
 785:Generated_Source\PSoC5/PWM_1.c ****     *
 786:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_1.c ****     *
 789:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_1.c ****     {
 487              		.loc 1 791 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492 0000 80B4     		push	{r7}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 7, -4
 495 0002 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 792:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_CAPTURE_LSB_PTR));
 497              		.loc 1 792 0
 498 0004 034B     		ldr	r3, .L36
 499 0006 1B88     		ldrh	r3, [r3]	@ movhi
 500 0008 9BB2     		uxth	r3, r3
 793:Generated_Source\PSoC5/PWM_1.c ****     }
 501              		.loc 1 793 0
 502 000a 1846     		mov	r0, r3
 503 000c BD46     		mov	sp, r7
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 000e 5DF8047B 		ldr	r7, [sp], #4
 507              		.cfi_restore 7
 508              		.cfi_def_cfa_offset 0
 509 0012 7047     		bx	lr
 510              	.L37:
 511              		.align	2
 512              	.L36:
 513 0014 BC680040 		.word	1073768636
 514              		.cfi_endproc
 515              	.LFE10:
 516              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 517              		.section	.text.PWM_1_ReadCompare,"ax",%progbits
 518              		.align	2
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 24


 519              		.global	PWM_1_ReadCompare
 520              		.thumb
 521              		.thumb_func
 522              		.type	PWM_1_ReadCompare, %function
 523              	PWM_1_ReadCompare:
 524              	.LFB11:
 794:Generated_Source\PSoC5/PWM_1.c **** 
 795:Generated_Source\PSoC5/PWM_1.c **** #endif /* (!PWM_1_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_1.c **** 
 797:Generated_Source\PSoC5/PWM_1.c **** 
 798:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_1.c **** 
 800:Generated_Source\PSoC5/PWM_1.c **** 
 801:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare
 803:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_1.c ****     *
 805:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_1.c ****     *
 809:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_1.c ****     *  None
 811:Generated_Source\PSoC5/PWM_1.c ****     *
 812:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_1.c ****     *
 815:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_1.c ****     {
 525              		.loc 1 817 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530 0000 80B4     		push	{r7}
 531              		.cfi_def_cfa_offset 4
 532              		.cfi_offset 7, -4
 533 0002 00AF     		add	r7, sp, #0
 534              		.cfi_def_cfa_register 7
 818:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM_1.c ****             return ((uint16)CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_1.c ****         #else
 821:Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 535              		.loc 1 821 0
 536 0004 034B     		ldr	r3, .L40
 537 0006 1B88     		ldrh	r3, [r3]	@ movhi
 538 0008 9BB2     		uxth	r3, r3
 822:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_1.c ****     }
 539              		.loc 1 823 0
 540 000a 1846     		mov	r0, r3
 541 000c BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 000e 5DF8047B 		ldr	r7, [sp], #4
 545              		.cfi_restore 7
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 25


 546              		.cfi_def_cfa_offset 0
 547 0012 7047     		bx	lr
 548              	.L41:
 549              		.align	2
 550              	.L40:
 551 0014 5C680040 		.word	1073768540
 552              		.cfi_endproc
 553              	.LFE11:
 554              		.size	PWM_1_ReadCompare, .-PWM_1_ReadCompare
 555              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 556              		.align	2
 557              		.global	PWM_1_ReadPeriod
 558              		.thumb
 559              		.thumb_func
 560              		.type	PWM_1_ReadPeriod, %function
 561              	PWM_1_ReadPeriod:
 562              	.LFB12:
 824:Generated_Source\PSoC5/PWM_1.c **** 
 825:Generated_Source\PSoC5/PWM_1.c **** #else
 826:Generated_Source\PSoC5/PWM_1.c **** 
 827:Generated_Source\PSoC5/PWM_1.c **** 
 828:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare1
 830:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM_1.c ****     *
 832:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_1.c ****     *
 835:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_1.c ****     *  None
 837:Generated_Source\PSoC5/PWM_1.c ****     *
 838:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_1.c ****     *
 841:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_1.c ****     {
 844:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_1.c ****     }
 846:Generated_Source\PSoC5/PWM_1.c **** 
 847:Generated_Source\PSoC5/PWM_1.c **** 
 848:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare2
 850:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_1.c ****     *
 852:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_1.c ****     *
 855:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_1.c ****     *  None
 857:Generated_Source\PSoC5/PWM_1.c ****     *
 858:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_1.c ****     *
 861:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_1.c ****     {
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 26


 864:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_1.c ****     }
 866:Generated_Source\PSoC5/PWM_1.c **** 
 867:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM_1.c **** 
 869:Generated_Source\PSoC5/PWM_1.c **** 
 870:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 872:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM_1.c **** *
 874:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_1.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_1.c **** *
 877:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_1.c **** *  None
 879:Generated_Source\PSoC5/PWM_1.c **** *
 880:Generated_Source\PSoC5/PWM_1.c **** * Return:
 881:Generated_Source\PSoC5/PWM_1.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_1.c **** *
 883:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_1.c **** uint16 PWM_1_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_1.c **** {
 563              		.loc 1 885 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0000 80B4     		push	{r7}
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 7, -4
 571 0002 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 886:Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_1.c ****         return ((uint16)CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_1.c ****     #else
 889:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 573              		.loc 1 889 0
 574 0004 034B     		ldr	r3, .L44
 575 0006 1B88     		ldrh	r3, [r3]	@ movhi
 576 0008 9BB2     		uxth	r3, r3
 890:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM_1.c **** }
 577              		.loc 1 891 0
 578 000a 1846     		mov	r0, r3
 579 000c BD46     		mov	sp, r7
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 000e 5DF8047B 		ldr	r7, [sp], #4
 583              		.cfi_restore 7
 584              		.cfi_def_cfa_offset 0
 585 0012 7047     		bx	lr
 586              	.L45:
 587              		.align	2
 588              	.L44:
 589 0014 9C680040 		.word	1073768604
 590              		.cfi_endproc
 591              	.LFE12:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 27


 592              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 593              		.text
 594              	.Letext0:
 595              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 596              		.section	.debug_info,"",%progbits
 597              	.Ldebug_info0:
 598 0000 40020000 		.4byte	0x240
 599 0004 0400     		.2byte	0x4
 600 0006 00000000 		.4byte	.Ldebug_abbrev0
 601 000a 04       		.byte	0x4
 602 000b 01       		.uleb128 0x1
 603 000c CF010000 		.4byte	.LASF35
 604 0010 01       		.byte	0x1
 605 0011 0B010000 		.4byte	.LASF36
 606 0015 7A010000 		.4byte	.LASF37
 607 0019 00000000 		.4byte	.Ldebug_ranges0+0
 608 001d 00000000 		.4byte	0
 609 0021 00000000 		.4byte	.Ldebug_line0
 610 0025 02       		.uleb128 0x2
 611 0026 01       		.byte	0x1
 612 0027 06       		.byte	0x6
 613 0028 9A020000 		.4byte	.LASF0
 614 002c 02       		.uleb128 0x2
 615 002d 01       		.byte	0x1
 616 002e 08       		.byte	0x8
 617 002f 4E000000 		.4byte	.LASF1
 618 0033 02       		.uleb128 0x2
 619 0034 02       		.byte	0x2
 620 0035 05       		.byte	0x5
 621 0036 B9000000 		.4byte	.LASF2
 622 003a 02       		.uleb128 0x2
 623 003b 02       		.byte	0x2
 624 003c 07       		.byte	0x7
 625 003d 2D000000 		.4byte	.LASF3
 626 0041 02       		.uleb128 0x2
 627 0042 04       		.byte	0x4
 628 0043 05       		.byte	0x5
 629 0044 8C020000 		.4byte	.LASF4
 630 0048 02       		.uleb128 0x2
 631 0049 04       		.byte	0x4
 632 004a 07       		.byte	0x7
 633 004b 72000000 		.4byte	.LASF5
 634 004f 02       		.uleb128 0x2
 635 0050 08       		.byte	0x8
 636 0051 05       		.byte	0x5
 637 0052 52010000 		.4byte	.LASF6
 638 0056 02       		.uleb128 0x2
 639 0057 08       		.byte	0x8
 640 0058 07       		.byte	0x7
 641 0059 F4000000 		.4byte	.LASF7
 642 005d 03       		.uleb128 0x3
 643 005e 04       		.byte	0x4
 644 005f 05       		.byte	0x5
 645 0060 696E7400 		.ascii	"int\000"
 646 0064 02       		.uleb128 0x2
 647 0065 04       		.byte	0x4
 648 0066 07       		.byte	0x7
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 28


 649 0067 E7000000 		.4byte	.LASF8
 650 006b 04       		.uleb128 0x4
 651 006c 84000000 		.4byte	.LASF9
 652 0070 02       		.byte	0x2
 653 0071 9201     		.2byte	0x192
 654 0073 2C000000 		.4byte	0x2c
 655 0077 04       		.uleb128 0x4
 656 0078 D5000000 		.4byte	.LASF10
 657 007c 02       		.byte	0x2
 658 007d 9301     		.2byte	0x193
 659 007f 3A000000 		.4byte	0x3a
 660 0083 02       		.uleb128 0x2
 661 0084 04       		.byte	0x4
 662 0085 04       		.byte	0x4
 663 0086 40000000 		.4byte	.LASF11
 664 008a 02       		.uleb128 0x2
 665 008b 08       		.byte	0x8
 666 008c 04       		.byte	0x4
 667 008d A4000000 		.4byte	.LASF12
 668 0091 02       		.uleb128 0x2
 669 0092 01       		.byte	0x1
 670 0093 08       		.byte	0x8
 671 0094 95020000 		.4byte	.LASF13
 672 0098 04       		.uleb128 0x4
 673 0099 5C000000 		.4byte	.LASF14
 674 009d 02       		.byte	0x2
 675 009e 3C02     		.2byte	0x23c
 676 00a0 A4000000 		.4byte	0xa4
 677 00a4 05       		.uleb128 0x5
 678 00a5 6B000000 		.4byte	0x6b
 679 00a9 04       		.uleb128 0x4
 680 00aa 00000000 		.4byte	.LASF15
 681 00ae 02       		.byte	0x2
 682 00af 3D02     		.2byte	0x23d
 683 00b1 B5000000 		.4byte	0xb5
 684 00b5 05       		.uleb128 0x5
 685 00b6 77000000 		.4byte	0x77
 686 00ba 02       		.uleb128 0x2
 687 00bb 04       		.byte	0x4
 688 00bc 07       		.byte	0x7
 689 00bd 36010000 		.4byte	.LASF16
 690 00c1 06       		.uleb128 0x6
 691 00c2 AE020000 		.4byte	.LASF17
 692 00c6 01       		.byte	0x1
 693 00c7 37       		.byte	0x37
 694 00c8 00000000 		.4byte	.LFB0
 695 00cc 20000000 		.4byte	.LFE0-.LFB0
 696 00d0 01       		.uleb128 0x1
 697 00d1 9C       		.byte	0x9c
 698 00d2 07       		.uleb128 0x7
 699 00d3 DC000000 		.4byte	.LASF20
 700 00d7 01       		.byte	0x1
 701 00d8 54       		.byte	0x54
 702 00d9 00000000 		.4byte	.LFB1
 703 00dd 68000000 		.4byte	.LFE1-.LFB1
 704 00e1 01       		.uleb128 0x1
 705 00e2 9C       		.byte	0x9c
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 29


 706 00e3 F6000000 		.4byte	0xf6
 707 00e7 08       		.uleb128 0x8
 708 00e8 31010000 		.4byte	.LASF27
 709 00ec 01       		.byte	0x1
 710 00ed 57       		.byte	0x57
 711 00ee 6B000000 		.4byte	0x6b
 712 00f2 02       		.uleb128 0x2
 713 00f3 91       		.byte	0x91
 714 00f4 77       		.sleb128 -9
 715 00f5 00       		.byte	0
 716 00f6 09       		.uleb128 0x9
 717 00f7 06000000 		.4byte	.LASF18
 718 00fb 01       		.byte	0x1
 719 00fc C7       		.byte	0xc7
 720 00fd 00000000 		.4byte	.LFB2
 721 0101 20000000 		.4byte	.LFE2-.LFB2
 722 0105 01       		.uleb128 0x1
 723 0106 9C       		.byte	0x9c
 724 0107 09       		.uleb128 0x9
 725 0108 81020000 		.4byte	.LASF19
 726 010c 01       		.byte	0x1
 727 010d E9       		.byte	0xe9
 728 010e 00000000 		.4byte	.LFB3
 729 0112 20000000 		.4byte	.LFE3-.LFB3
 730 0116 01       		.uleb128 0x1
 731 0117 9C       		.byte	0x9c
 732 0118 0A       		.uleb128 0xa
 733 0119 13000000 		.4byte	.LASF21
 734 011d 01       		.byte	0x1
 735 011e 9301     		.2byte	0x193
 736 0120 00000000 		.4byte	.LFB4
 737 0124 20000000 		.4byte	.LFE4-.LFB4
 738 0128 01       		.uleb128 0x1
 739 0129 9C       		.byte	0x9c
 740 012a 3E010000 		.4byte	0x13e
 741 012e 0B       		.uleb128 0xb
 742 012f 46000000 		.4byte	.LASF23
 743 0133 01       		.byte	0x1
 744 0134 9301     		.2byte	0x193
 745 0136 77000000 		.4byte	0x77
 746 013a 02       		.uleb128 0x2
 747 013b 91       		.byte	0x91
 748 013c 76       		.sleb128 -10
 749 013d 00       		.byte	0
 750 013e 0C       		.uleb128 0xc
 751 013f 6F020000 		.4byte	.LASF31
 752 0143 01       		.byte	0x1
 753 0144 A901     		.2byte	0x1a9
 754 0146 77000000 		.4byte	0x77
 755 014a 00000000 		.4byte	.LFB5
 756 014e 20000000 		.4byte	.LFE5-.LFB5
 757 0152 01       		.uleb128 0x1
 758 0153 9C       		.byte	0x9c
 759 0154 0A       		.uleb128 0xa
 760 0155 5D020000 		.4byte	.LASF22
 761 0159 01       		.byte	0x1
 762 015a E201     		.2byte	0x1e2
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 30


 763 015c 00000000 		.4byte	.LFB6
 764 0160 20000000 		.4byte	.LFE6-.LFB6
 765 0164 01       		.uleb128 0x1
 766 0165 9C       		.byte	0x9c
 767 0166 7A010000 		.4byte	0x17a
 768 016a 0B       		.uleb128 0xb
 769 016b 26000000 		.4byte	.LASF24
 770 016f 01       		.byte	0x1
 771 0170 E201     		.2byte	0x1e2
 772 0172 77000000 		.4byte	0x77
 773 0176 02       		.uleb128 0x2
 774 0177 91       		.byte	0x91
 775 0178 76       		.sleb128 -10
 776 0179 00       		.byte	0
 777 017a 0A       		.uleb128 0xa
 778 017b 3F010000 		.4byte	.LASF25
 779 017f 01       		.byte	0x1
 780 0180 0402     		.2byte	0x204
 781 0182 00000000 		.4byte	.LFB7
 782 0186 20000000 		.4byte	.LFE7-.LFB7
 783 018a 01       		.uleb128 0x1
 784 018b 9C       		.byte	0x9c
 785 018c A0010000 		.4byte	0x1a0
 786 0190 0B       		.uleb128 0xb
 787 0191 A6020000 		.4byte	.LASF26
 788 0195 01       		.byte	0x1
 789 0196 0402     		.2byte	0x204
 790 0198 77000000 		.4byte	0x77
 791 019c 02       		.uleb128 0x2
 792 019d 91       		.byte	0x91
 793 019e 76       		.sleb128 -10
 794 019f 00       		.byte	0
 795 01a0 0D       		.uleb128 0xd
 796 01a1 60010000 		.4byte	.LASF38
 797 01a5 01       		.byte	0x1
 798 01a6 E102     		.2byte	0x2e1
 799 01a8 6B000000 		.4byte	0x6b
 800 01ac 00000000 		.4byte	.LFB8
 801 01b0 20000000 		.4byte	.LFE8-.LFB8
 802 01b4 01       		.uleb128 0x1
 803 01b5 9C       		.byte	0x9c
 804 01b6 CA010000 		.4byte	0x1ca
 805 01ba 0E       		.uleb128 0xe
 806 01bb 2A010000 		.4byte	.LASF28
 807 01bf 01       		.byte	0x1
 808 01c0 E302     		.2byte	0x2e3
 809 01c2 6B000000 		.4byte	0x6b
 810 01c6 02       		.uleb128 0x2
 811 01c7 91       		.byte	0x91
 812 01c8 77       		.sleb128 -9
 813 01c9 00       		.byte	0
 814 01ca 0A       		.uleb128 0xa
 815 01cb B4010000 		.4byte	.LASF29
 816 01cf 01       		.byte	0x1
 817 01d0 FD02     		.2byte	0x2fd
 818 01d2 00000000 		.4byte	.LFB9
 819 01d6 20000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 31


 820 01da 01       		.uleb128 0x1
 821 01db 9C       		.byte	0x9c
 822 01dc F0010000 		.4byte	0x1f0
 823 01e0 0B       		.uleb128 0xb
 824 01e1 8A000000 		.4byte	.LASF30
 825 01e5 01       		.byte	0x1
 826 01e6 FD02     		.2byte	0x2fd
 827 01e8 6B000000 		.4byte	0x6b
 828 01ec 02       		.uleb128 0x2
 829 01ed 91       		.byte	0x91
 830 01ee 77       		.sleb128 -9
 831 01ef 00       		.byte	0
 832 01f0 0C       		.uleb128 0xc
 833 01f1 C3000000 		.4byte	.LASF32
 834 01f5 01       		.byte	0x1
 835 01f6 1603     		.2byte	0x316
 836 01f8 77000000 		.4byte	0x77
 837 01fc 00000000 		.4byte	.LFB10
 838 0200 18000000 		.4byte	.LFE10-.LFB10
 839 0204 01       		.uleb128 0x1
 840 0205 9C       		.byte	0x9c
 841 0206 0C       		.uleb128 0xc
 842 0207 92000000 		.4byte	.LASF33
 843 020b 01       		.byte	0x1
 844 020c 3003     		.2byte	0x330
 845 020e 77000000 		.4byte	0x77
 846 0212 00000000 		.4byte	.LFB11
 847 0216 18000000 		.4byte	.LFE11-.LFB11
 848 021a 01       		.uleb128 0x1
 849 021b 9C       		.byte	0x9c
 850 021c 0C       		.uleb128 0xc
 851 021d 61000000 		.4byte	.LASF34
 852 0221 01       		.byte	0x1
 853 0222 7403     		.2byte	0x374
 854 0224 77000000 		.4byte	0x77
 855 0228 00000000 		.4byte	.LFB12
 856 022c 18000000 		.4byte	.LFE12-.LFB12
 857 0230 01       		.uleb128 0x1
 858 0231 9C       		.byte	0x9c
 859 0232 0F       		.uleb128 0xf
 860 0233 AB000000 		.4byte	.LASF39
 861 0237 01       		.byte	0x1
 862 0238 20       		.byte	0x20
 863 0239 6B000000 		.4byte	0x6b
 864 023d 05       		.uleb128 0x5
 865 023e 03       		.byte	0x3
 866 023f 00000000 		.4byte	PWM_1_initVar
 867 0243 00       		.byte	0
 868              		.section	.debug_abbrev,"",%progbits
 869              	.Ldebug_abbrev0:
 870 0000 01       		.uleb128 0x1
 871 0001 11       		.uleb128 0x11
 872 0002 01       		.byte	0x1
 873 0003 25       		.uleb128 0x25
 874 0004 0E       		.uleb128 0xe
 875 0005 13       		.uleb128 0x13
 876 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 32


 877 0007 03       		.uleb128 0x3
 878 0008 0E       		.uleb128 0xe
 879 0009 1B       		.uleb128 0x1b
 880 000a 0E       		.uleb128 0xe
 881 000b 55       		.uleb128 0x55
 882 000c 17       		.uleb128 0x17
 883 000d 11       		.uleb128 0x11
 884 000e 01       		.uleb128 0x1
 885 000f 10       		.uleb128 0x10
 886 0010 17       		.uleb128 0x17
 887 0011 00       		.byte	0
 888 0012 00       		.byte	0
 889 0013 02       		.uleb128 0x2
 890 0014 24       		.uleb128 0x24
 891 0015 00       		.byte	0
 892 0016 0B       		.uleb128 0xb
 893 0017 0B       		.uleb128 0xb
 894 0018 3E       		.uleb128 0x3e
 895 0019 0B       		.uleb128 0xb
 896 001a 03       		.uleb128 0x3
 897 001b 0E       		.uleb128 0xe
 898 001c 00       		.byte	0
 899 001d 00       		.byte	0
 900 001e 03       		.uleb128 0x3
 901 001f 24       		.uleb128 0x24
 902 0020 00       		.byte	0
 903 0021 0B       		.uleb128 0xb
 904 0022 0B       		.uleb128 0xb
 905 0023 3E       		.uleb128 0x3e
 906 0024 0B       		.uleb128 0xb
 907 0025 03       		.uleb128 0x3
 908 0026 08       		.uleb128 0x8
 909 0027 00       		.byte	0
 910 0028 00       		.byte	0
 911 0029 04       		.uleb128 0x4
 912 002a 16       		.uleb128 0x16
 913 002b 00       		.byte	0
 914 002c 03       		.uleb128 0x3
 915 002d 0E       		.uleb128 0xe
 916 002e 3A       		.uleb128 0x3a
 917 002f 0B       		.uleb128 0xb
 918 0030 3B       		.uleb128 0x3b
 919 0031 05       		.uleb128 0x5
 920 0032 49       		.uleb128 0x49
 921 0033 13       		.uleb128 0x13
 922 0034 00       		.byte	0
 923 0035 00       		.byte	0
 924 0036 05       		.uleb128 0x5
 925 0037 35       		.uleb128 0x35
 926 0038 00       		.byte	0
 927 0039 49       		.uleb128 0x49
 928 003a 13       		.uleb128 0x13
 929 003b 00       		.byte	0
 930 003c 00       		.byte	0
 931 003d 06       		.uleb128 0x6
 932 003e 2E       		.uleb128 0x2e
 933 003f 00       		.byte	0
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 33


 934 0040 3F       		.uleb128 0x3f
 935 0041 19       		.uleb128 0x19
 936 0042 03       		.uleb128 0x3
 937 0043 0E       		.uleb128 0xe
 938 0044 3A       		.uleb128 0x3a
 939 0045 0B       		.uleb128 0xb
 940 0046 3B       		.uleb128 0x3b
 941 0047 0B       		.uleb128 0xb
 942 0048 27       		.uleb128 0x27
 943 0049 19       		.uleb128 0x19
 944 004a 11       		.uleb128 0x11
 945 004b 01       		.uleb128 0x1
 946 004c 12       		.uleb128 0x12
 947 004d 06       		.uleb128 0x6
 948 004e 40       		.uleb128 0x40
 949 004f 18       		.uleb128 0x18
 950 0050 9642     		.uleb128 0x2116
 951 0052 19       		.uleb128 0x19
 952 0053 00       		.byte	0
 953 0054 00       		.byte	0
 954 0055 07       		.uleb128 0x7
 955 0056 2E       		.uleb128 0x2e
 956 0057 01       		.byte	0x1
 957 0058 3F       		.uleb128 0x3f
 958 0059 19       		.uleb128 0x19
 959 005a 03       		.uleb128 0x3
 960 005b 0E       		.uleb128 0xe
 961 005c 3A       		.uleb128 0x3a
 962 005d 0B       		.uleb128 0xb
 963 005e 3B       		.uleb128 0x3b
 964 005f 0B       		.uleb128 0xb
 965 0060 27       		.uleb128 0x27
 966 0061 19       		.uleb128 0x19
 967 0062 11       		.uleb128 0x11
 968 0063 01       		.uleb128 0x1
 969 0064 12       		.uleb128 0x12
 970 0065 06       		.uleb128 0x6
 971 0066 40       		.uleb128 0x40
 972 0067 18       		.uleb128 0x18
 973 0068 9642     		.uleb128 0x2116
 974 006a 19       		.uleb128 0x19
 975 006b 01       		.uleb128 0x1
 976 006c 13       		.uleb128 0x13
 977 006d 00       		.byte	0
 978 006e 00       		.byte	0
 979 006f 08       		.uleb128 0x8
 980 0070 34       		.uleb128 0x34
 981 0071 00       		.byte	0
 982 0072 03       		.uleb128 0x3
 983 0073 0E       		.uleb128 0xe
 984 0074 3A       		.uleb128 0x3a
 985 0075 0B       		.uleb128 0xb
 986 0076 3B       		.uleb128 0x3b
 987 0077 0B       		.uleb128 0xb
 988 0078 49       		.uleb128 0x49
 989 0079 13       		.uleb128 0x13
 990 007a 02       		.uleb128 0x2
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 34


 991 007b 18       		.uleb128 0x18
 992 007c 00       		.byte	0
 993 007d 00       		.byte	0
 994 007e 09       		.uleb128 0x9
 995 007f 2E       		.uleb128 0x2e
 996 0080 00       		.byte	0
 997 0081 3F       		.uleb128 0x3f
 998 0082 19       		.uleb128 0x19
 999 0083 03       		.uleb128 0x3
 1000 0084 0E       		.uleb128 0xe
 1001 0085 3A       		.uleb128 0x3a
 1002 0086 0B       		.uleb128 0xb
 1003 0087 3B       		.uleb128 0x3b
 1004 0088 0B       		.uleb128 0xb
 1005 0089 27       		.uleb128 0x27
 1006 008a 19       		.uleb128 0x19
 1007 008b 11       		.uleb128 0x11
 1008 008c 01       		.uleb128 0x1
 1009 008d 12       		.uleb128 0x12
 1010 008e 06       		.uleb128 0x6
 1011 008f 40       		.uleb128 0x40
 1012 0090 18       		.uleb128 0x18
 1013 0091 9742     		.uleb128 0x2117
 1014 0093 19       		.uleb128 0x19
 1015 0094 00       		.byte	0
 1016 0095 00       		.byte	0
 1017 0096 0A       		.uleb128 0xa
 1018 0097 2E       		.uleb128 0x2e
 1019 0098 01       		.byte	0x1
 1020 0099 3F       		.uleb128 0x3f
 1021 009a 19       		.uleb128 0x19
 1022 009b 03       		.uleb128 0x3
 1023 009c 0E       		.uleb128 0xe
 1024 009d 3A       		.uleb128 0x3a
 1025 009e 0B       		.uleb128 0xb
 1026 009f 3B       		.uleb128 0x3b
 1027 00a0 05       		.uleb128 0x5
 1028 00a1 27       		.uleb128 0x27
 1029 00a2 19       		.uleb128 0x19
 1030 00a3 11       		.uleb128 0x11
 1031 00a4 01       		.uleb128 0x1
 1032 00a5 12       		.uleb128 0x12
 1033 00a6 06       		.uleb128 0x6
 1034 00a7 40       		.uleb128 0x40
 1035 00a8 18       		.uleb128 0x18
 1036 00a9 9742     		.uleb128 0x2117
 1037 00ab 19       		.uleb128 0x19
 1038 00ac 01       		.uleb128 0x1
 1039 00ad 13       		.uleb128 0x13
 1040 00ae 00       		.byte	0
 1041 00af 00       		.byte	0
 1042 00b0 0B       		.uleb128 0xb
 1043 00b1 05       		.uleb128 0x5
 1044 00b2 00       		.byte	0
 1045 00b3 03       		.uleb128 0x3
 1046 00b4 0E       		.uleb128 0xe
 1047 00b5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 35


 1048 00b6 0B       		.uleb128 0xb
 1049 00b7 3B       		.uleb128 0x3b
 1050 00b8 05       		.uleb128 0x5
 1051 00b9 49       		.uleb128 0x49
 1052 00ba 13       		.uleb128 0x13
 1053 00bb 02       		.uleb128 0x2
 1054 00bc 18       		.uleb128 0x18
 1055 00bd 00       		.byte	0
 1056 00be 00       		.byte	0
 1057 00bf 0C       		.uleb128 0xc
 1058 00c0 2E       		.uleb128 0x2e
 1059 00c1 00       		.byte	0
 1060 00c2 3F       		.uleb128 0x3f
 1061 00c3 19       		.uleb128 0x19
 1062 00c4 03       		.uleb128 0x3
 1063 00c5 0E       		.uleb128 0xe
 1064 00c6 3A       		.uleb128 0x3a
 1065 00c7 0B       		.uleb128 0xb
 1066 00c8 3B       		.uleb128 0x3b
 1067 00c9 05       		.uleb128 0x5
 1068 00ca 27       		.uleb128 0x27
 1069 00cb 19       		.uleb128 0x19
 1070 00cc 49       		.uleb128 0x49
 1071 00cd 13       		.uleb128 0x13
 1072 00ce 11       		.uleb128 0x11
 1073 00cf 01       		.uleb128 0x1
 1074 00d0 12       		.uleb128 0x12
 1075 00d1 06       		.uleb128 0x6
 1076 00d2 40       		.uleb128 0x40
 1077 00d3 18       		.uleb128 0x18
 1078 00d4 9742     		.uleb128 0x2117
 1079 00d6 19       		.uleb128 0x19
 1080 00d7 00       		.byte	0
 1081 00d8 00       		.byte	0
 1082 00d9 0D       		.uleb128 0xd
 1083 00da 2E       		.uleb128 0x2e
 1084 00db 01       		.byte	0x1
 1085 00dc 3F       		.uleb128 0x3f
 1086 00dd 19       		.uleb128 0x19
 1087 00de 03       		.uleb128 0x3
 1088 00df 0E       		.uleb128 0xe
 1089 00e0 3A       		.uleb128 0x3a
 1090 00e1 0B       		.uleb128 0xb
 1091 00e2 3B       		.uleb128 0x3b
 1092 00e3 05       		.uleb128 0x5
 1093 00e4 27       		.uleb128 0x27
 1094 00e5 19       		.uleb128 0x19
 1095 00e6 49       		.uleb128 0x49
 1096 00e7 13       		.uleb128 0x13
 1097 00e8 11       		.uleb128 0x11
 1098 00e9 01       		.uleb128 0x1
 1099 00ea 12       		.uleb128 0x12
 1100 00eb 06       		.uleb128 0x6
 1101 00ec 40       		.uleb128 0x40
 1102 00ed 18       		.uleb128 0x18
 1103 00ee 9742     		.uleb128 0x2117
 1104 00f0 19       		.uleb128 0x19
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 36


 1105 00f1 01       		.uleb128 0x1
 1106 00f2 13       		.uleb128 0x13
 1107 00f3 00       		.byte	0
 1108 00f4 00       		.byte	0
 1109 00f5 0E       		.uleb128 0xe
 1110 00f6 34       		.uleb128 0x34
 1111 00f7 00       		.byte	0
 1112 00f8 03       		.uleb128 0x3
 1113 00f9 0E       		.uleb128 0xe
 1114 00fa 3A       		.uleb128 0x3a
 1115 00fb 0B       		.uleb128 0xb
 1116 00fc 3B       		.uleb128 0x3b
 1117 00fd 05       		.uleb128 0x5
 1118 00fe 49       		.uleb128 0x49
 1119 00ff 13       		.uleb128 0x13
 1120 0100 02       		.uleb128 0x2
 1121 0101 18       		.uleb128 0x18
 1122 0102 00       		.byte	0
 1123 0103 00       		.byte	0
 1124 0104 0F       		.uleb128 0xf
 1125 0105 34       		.uleb128 0x34
 1126 0106 00       		.byte	0
 1127 0107 03       		.uleb128 0x3
 1128 0108 0E       		.uleb128 0xe
 1129 0109 3A       		.uleb128 0x3a
 1130 010a 0B       		.uleb128 0xb
 1131 010b 3B       		.uleb128 0x3b
 1132 010c 0B       		.uleb128 0xb
 1133 010d 49       		.uleb128 0x49
 1134 010e 13       		.uleb128 0x13
 1135 010f 3F       		.uleb128 0x3f
 1136 0110 19       		.uleb128 0x19
 1137 0111 02       		.uleb128 0x2
 1138 0112 18       		.uleb128 0x18
 1139 0113 00       		.byte	0
 1140 0114 00       		.byte	0
 1141 0115 00       		.byte	0
 1142              		.section	.debug_aranges,"",%progbits
 1143 0000 7C000000 		.4byte	0x7c
 1144 0004 0200     		.2byte	0x2
 1145 0006 00000000 		.4byte	.Ldebug_info0
 1146 000a 04       		.byte	0x4
 1147 000b 00       		.byte	0
 1148 000c 0000     		.2byte	0
 1149 000e 0000     		.2byte	0
 1150 0010 00000000 		.4byte	.LFB0
 1151 0014 20000000 		.4byte	.LFE0-.LFB0
 1152 0018 00000000 		.4byte	.LFB1
 1153 001c 68000000 		.4byte	.LFE1-.LFB1
 1154 0020 00000000 		.4byte	.LFB2
 1155 0024 20000000 		.4byte	.LFE2-.LFB2
 1156 0028 00000000 		.4byte	.LFB3
 1157 002c 20000000 		.4byte	.LFE3-.LFB3
 1158 0030 00000000 		.4byte	.LFB4
 1159 0034 20000000 		.4byte	.LFE4-.LFB4
 1160 0038 00000000 		.4byte	.LFB5
 1161 003c 20000000 		.4byte	.LFE5-.LFB5
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 37


 1162 0040 00000000 		.4byte	.LFB6
 1163 0044 20000000 		.4byte	.LFE6-.LFB6
 1164 0048 00000000 		.4byte	.LFB7
 1165 004c 20000000 		.4byte	.LFE7-.LFB7
 1166 0050 00000000 		.4byte	.LFB8
 1167 0054 20000000 		.4byte	.LFE8-.LFB8
 1168 0058 00000000 		.4byte	.LFB9
 1169 005c 20000000 		.4byte	.LFE9-.LFB9
 1170 0060 00000000 		.4byte	.LFB10
 1171 0064 18000000 		.4byte	.LFE10-.LFB10
 1172 0068 00000000 		.4byte	.LFB11
 1173 006c 18000000 		.4byte	.LFE11-.LFB11
 1174 0070 00000000 		.4byte	.LFB12
 1175 0074 18000000 		.4byte	.LFE12-.LFB12
 1176 0078 00000000 		.4byte	0
 1177 007c 00000000 		.4byte	0
 1178              		.section	.debug_ranges,"",%progbits
 1179              	.Ldebug_ranges0:
 1180 0000 00000000 		.4byte	.LFB0
 1181 0004 20000000 		.4byte	.LFE0
 1182 0008 00000000 		.4byte	.LFB1
 1183 000c 68000000 		.4byte	.LFE1
 1184 0010 00000000 		.4byte	.LFB2
 1185 0014 20000000 		.4byte	.LFE2
 1186 0018 00000000 		.4byte	.LFB3
 1187 001c 20000000 		.4byte	.LFE3
 1188 0020 00000000 		.4byte	.LFB4
 1189 0024 20000000 		.4byte	.LFE4
 1190 0028 00000000 		.4byte	.LFB5
 1191 002c 20000000 		.4byte	.LFE5
 1192 0030 00000000 		.4byte	.LFB6
 1193 0034 20000000 		.4byte	.LFE6
 1194 0038 00000000 		.4byte	.LFB7
 1195 003c 20000000 		.4byte	.LFE7
 1196 0040 00000000 		.4byte	.LFB8
 1197 0044 20000000 		.4byte	.LFE8
 1198 0048 00000000 		.4byte	.LFB9
 1199 004c 20000000 		.4byte	.LFE9
 1200 0050 00000000 		.4byte	.LFB10
 1201 0054 18000000 		.4byte	.LFE10
 1202 0058 00000000 		.4byte	.LFB11
 1203 005c 18000000 		.4byte	.LFE11
 1204 0060 00000000 		.4byte	.LFB12
 1205 0064 18000000 		.4byte	.LFE12
 1206 0068 00000000 		.4byte	0
 1207 006c 00000000 		.4byte	0
 1208              		.section	.debug_line,"",%progbits
 1209              	.Ldebug_line0:
 1210 0000 46010000 		.section	.debug_str,"MS",%progbits,1
 1210      02004200 
 1210      00000201 
 1210      FB0E0D00 
 1210      01010101 
 1211              	.LASF15:
 1212 0000 72656731 		.ascii	"reg16\000"
 1212      3600
 1213              	.LASF18:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 38


 1214 0006 50574D5F 		.ascii	"PWM_1_Enable\000"
 1214      315F456E 
 1214      61626C65 
 1214      00
 1215              	.LASF21:
 1216 0013 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 1216      315F5772 
 1216      69746543 
 1216      6F756E74 
 1216      657200
 1217              	.LASF24:
 1218 0026 70657269 		.ascii	"period\000"
 1218      6F6400
 1219              	.LASF3:
 1220 002d 73686F72 		.ascii	"short unsigned int\000"
 1220      7420756E 
 1220      7369676E 
 1220      65642069 
 1220      6E7400
 1221              	.LASF11:
 1222 0040 666C6F61 		.ascii	"float\000"
 1222      7400
 1223              	.LASF23:
 1224 0046 636F756E 		.ascii	"counter\000"
 1224      74657200 
 1225              	.LASF1:
 1226 004e 756E7369 		.ascii	"unsigned char\000"
 1226      676E6564 
 1226      20636861 
 1226      7200
 1227              	.LASF14:
 1228 005c 72656738 		.ascii	"reg8\000"
 1228      00
 1229              	.LASF34:
 1230 0061 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 1230      315F5265 
 1230      61645065 
 1230      72696F64 
 1230      00
 1231              	.LASF5:
 1232 0072 6C6F6E67 		.ascii	"long unsigned int\000"
 1232      20756E73 
 1232      69676E65 
 1232      6420696E 
 1232      7400
 1233              	.LASF9:
 1234 0084 75696E74 		.ascii	"uint8\000"
 1234      3800
 1235              	.LASF30:
 1236 008a 636F6E74 		.ascii	"control\000"
 1236      726F6C00 
 1237              	.LASF33:
 1238 0092 50574D5F 		.ascii	"PWM_1_ReadCompare\000"
 1238      315F5265 
 1238      6164436F 
 1238      6D706172 
 1238      6500
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 39


 1239              	.LASF12:
 1240 00a4 646F7562 		.ascii	"double\000"
 1240      6C6500
 1241              	.LASF39:
 1242 00ab 50574D5F 		.ascii	"PWM_1_initVar\000"
 1242      315F696E 
 1242      69745661 
 1242      7200
 1243              	.LASF2:
 1244 00b9 73686F72 		.ascii	"short int\000"
 1244      7420696E 
 1244      7400
 1245              	.LASF32:
 1246 00c3 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 1246      315F5265 
 1246      61644361 
 1246      70747572 
 1246      6500
 1247              	.LASF10:
 1248 00d5 75696E74 		.ascii	"uint16\000"
 1248      313600
 1249              	.LASF20:
 1250 00dc 50574D5F 		.ascii	"PWM_1_Init\000"
 1250      315F496E 
 1250      697400
 1251              	.LASF8:
 1252 00e7 756E7369 		.ascii	"unsigned int\000"
 1252      676E6564 
 1252      20696E74 
 1252      00
 1253              	.LASF7:
 1254 00f4 6C6F6E67 		.ascii	"long long unsigned int\000"
 1254      206C6F6E 
 1254      6720756E 
 1254      7369676E 
 1254      65642069 
 1255              	.LASF36:
 1256 010b 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_1.c\000"
 1256      72617465 
 1256      645F536F 
 1256      75726365 
 1256      5C50536F 
 1257              	.LASF28:
 1258 012a 72657375 		.ascii	"result\000"
 1258      6C7400
 1259              	.LASF27:
 1260 0131 6374726C 		.ascii	"ctrl\000"
 1260      00
 1261              	.LASF16:
 1262 0136 73697A65 		.ascii	"sizetype\000"
 1262      74797065 
 1262      00
 1263              	.LASF25:
 1264 013f 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 1264      315F5772 
 1264      69746543 
 1264      6F6D7061 
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 40


 1264      726500
 1265              	.LASF6:
 1266 0152 6C6F6E67 		.ascii	"long long int\000"
 1266      206C6F6E 
 1266      6720696E 
 1266      7400
 1267              	.LASF38:
 1268 0160 50574D5F 		.ascii	"PWM_1_ReadControlRegister\000"
 1268      315F5265 
 1268      6164436F 
 1268      6E74726F 
 1268      6C526567 
 1269              	.LASF37:
 1270 017a 433A5C55 		.ascii	"C:\\Users\\ben\\Documents\\PSoC Creator\\DACTEST\\A"
 1270      73657273 
 1270      5C62656E 
 1270      5C446F63 
 1270      756D656E 
 1271 01a7 44435F44 		.ascii	"DC_DAC.cydsn\000"
 1271      41432E63 
 1271      7964736E 
 1271      00
 1272              	.LASF29:
 1273 01b4 50574D5F 		.ascii	"PWM_1_WriteControlRegister\000"
 1273      315F5772 
 1273      69746543 
 1273      6F6E7472 
 1273      6F6C5265 
 1274              	.LASF35:
 1275 01cf 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1275      4320342E 
 1275      392E3320 
 1275      32303135 
 1275      30333033 
 1276 0202 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1276      20726576 
 1276      6973696F 
 1276      6E203232 
 1276      31323230 
 1277 0235 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1277      66756E63 
 1277      74696F6E 
 1277      2D736563 
 1277      74696F6E 
 1278              	.LASF22:
 1279 025d 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 1279      315F5772 
 1279      69746550 
 1279      6572696F 
 1279      6400
 1280              	.LASF31:
 1281 026f 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 1281      315F5265 
 1281      6164436F 
 1281      756E7465 
 1281      7200
 1282              	.LASF19:
ARM GAS  C:\Users\ben\AppData\Local\Temp\ccVrTenv.s 			page 41


 1283 0281 50574D5F 		.ascii	"PWM_1_Stop\000"
 1283      315F5374 
 1283      6F7000
 1284              	.LASF4:
 1285 028c 6C6F6E67 		.ascii	"long int\000"
 1285      20696E74 
 1285      00
 1286              	.LASF13:
 1287 0295 63686172 		.ascii	"char\000"
 1287      00
 1288              	.LASF0:
 1289 029a 7369676E 		.ascii	"signed char\000"
 1289      65642063 
 1289      68617200 
 1290              	.LASF26:
 1291 02a6 636F6D70 		.ascii	"compare\000"
 1291      61726500 
 1292              	.LASF17:
 1293 02ae 50574D5F 		.ascii	"PWM_1_Start\000"
 1293      315F5374 
 1293      61727400 
 1294              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
